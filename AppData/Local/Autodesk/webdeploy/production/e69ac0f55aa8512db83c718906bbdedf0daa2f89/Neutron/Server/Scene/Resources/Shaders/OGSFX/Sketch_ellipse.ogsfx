#version 330
#include "Sketch_ellipse.ogsfh"

// ellipse primitive texture
uniform highp texture2D gEllipseIndexTex_ : EllipseIndexTexture; 
uniform highp sampler2D gEllipseIndexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gEllipseIndexTex_>; };
uniform highp texture2D gEllipticalArcDashDrawOrderZTex_ : EllipticalArcDashDrawOrderZTex;
uniform highp sampler2D gEllipticalArcDashDrawOrderZTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gEllipticalArcDashDrawOrderZTex_>; };

attribute VS_INPUT
{
    int VertexID : TEXCOORD0;
    int InstanceID : TEXCOORD1;
};

attribute VS_TO_PS
{
    vec4 vso_position;
    flat vec2 vso_radius;
    flat vec2 vso_range;
    flat vec2 vso_center;
    flat float vso_rotate;
    vec2 vso_uv;
    flat int vso_colorS;
    flat float vso_weight;
    flat int vso_glowColorS;
};

attribute pixelOut
{
    vec4 pso_color : COLOR0;
};

GLSLShader Ellipse_Dash_VS
{

// get primitive id
uint load_ellipse_prim_id(uint id)
{
    return load_prim_id_from_tex(gEllipseIndexTex, id);
}

void main()
{
     // load primitive index
    uint primID = load_ellipse_prim_id(uint(gl_InstanceID));

    // load ellipse information
    EllipseAttr_Dash ellipse_attr;
    load_ellipse_info(primID, ellipse_attr);
    
    if (gRetainMode)
    {
        load_dynamic_draworderz(uint(gl_InstanceID), gEllipticalArcDashDrawOrderZTex, ellipse_attr.drawZ);
    }
    else
    {
        adjust_ellipse(ellipse_attr);

    }
    
    VertexAttr_Ellipse outputData = output_vertex_attr_ellipse(uint(gl_VertexID), ellipse_attr);

    gl_Position = outputData.position;

    vso_position = outputData.position;
    
    vso_radius = outputData.radius;
    vso_range = outputData.range;
    vso_center = outputData.center;
    vso_rotate = outputData.rotate;
    vso_uv = outputData.uv;
    vso_colorS = int(outputData.color);
    vso_weight = outputData.weight;
    vso_glowColorS = int(outputData.glowColor);
}

}

GLSLShader Ellipse_Dash_PS
{

float ellipse_distance(vec2 radius, vec2 uv)
{
    // compute distance to ellipse
    float x_len = radius.x;
    float y_len = radius.y;
    
    float a = uv.x / x_len;
    float b = uv.y / y_len;
    
    vec2 dx = dFdx(uv);
    vec2 dy = dFdy(uv);
    
    float x_len_2 = x_len*x_len;
    float y_len_2 = y_len*y_len;
    
    float x_2 = uv.x*uv.x;
    float y_2 = uv.y*uv.y;
    
    float dfx = (2.0f * uv.x) / x_len_2 * dx.x + (2.0f * uv.y) / y_len_2 * dx.y;
    float dfy = (2.0f * uv.x) / x_len_2 * dy.x + (2.0f * uv.y) / y_len_2 * dy.y;
    
    float dist = 0.0f;
    float df_2 = dfx * dfx + dfy * dfy;
    
    if (df_2 > 0.0f)
        dist = (x_2 / x_len_2 + y_2 / y_len_2 - 1.0f) * inversesqrt(df_2);
    
    return abs(dist);
}

void main()
{
    uint vso_color = uint(vso_colorS);
    uint vso_glowColor = uint(vso_glowColorS);

    VertexAttr_Ellipse inputData = VertexAttr_Ellipse(vso_position, vso_radius, vso_range,
                                                      vso_center, vso_rotate, vso_uv,
                                                      vso_color, vso_weight, vso_glowColor);
    float dist = ellipse_distance(inputData.radius, inputData.uv);
    
    if (!valid_range_ellipse(inputData.radius, inputData.uv, inputData.range, dist))
        discard;

    float width = adjust_line_width_wide_line(uint(inputData.weight));
    vec4 color;

    if (gNoAAMode != 0)
    {
#ifdef ANALYTIC_HIGHLIGHT
        if (!in_lw_ellipse(inputData.weight, dist) && not_in_ellipse(inputData))
            discard;

        bool in_sharp = in_lw_ellipse(width, dist) || !not_in_ellipse(inputData);
        color = compute_highlight_sharp_color(dist, width, inputData.color, inputData.glowColor, in_sharp);
#else
        if (!in_lw_ellipse(width, dist) && not_in_ellipse(inputData))
            discard;

        color = get_formatted_color(inputData.color, 1.0f);
#endif
    }
    else
    {
        color = compute_final_color(dist, width, inputData.color, inputData.glowColor);
    }


    if (color.a < 0.01f)
        discard;
    pso_color = OIT_PS_OUTPUT(color, vso_position);  
}

}

technique Ellipse_Dash
{
    pass P0
    {
        VertexShader (in VS_INPUT, out VS_TO_PS) = Ellipse_Dash_VS;
        PixelShader (in VS_TO_PS, out pixelOut) = Ellipse_Dash_PS;
    }
}

