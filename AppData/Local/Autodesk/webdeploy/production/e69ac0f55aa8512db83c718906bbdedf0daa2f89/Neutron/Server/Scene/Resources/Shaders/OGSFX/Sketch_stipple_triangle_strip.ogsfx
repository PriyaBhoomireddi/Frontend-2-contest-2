#version 330
#include "Sketch_triangle.ogsfh"
#include "Sketch_screen.ogsfh"
#include "Sketch_stipple.ogsfh"

// Triangle strip vertex texture structure:
// 1. coordinates of vertex (2 floats)
// 2. primitive index (1 float)
uniform highp texture2D gStippleTriStripVertexTex_ : StippleTriangleStripVertexTexture ;
uniform highp sampler2D gStippleTriStripVertexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gStippleTriStripVertexTex_>; };

// Triangle strip primitive texture structure:
// 1. depth and logical flag shared value (1 float)
// 2. color (1 float)
// 3. stipple index (2 ushorts)
// 4. reserved
uniform highp texture2D gStippleTriStripPrimTex_ : StippleTriangleStripPrimTexture ;
uniform highp sampler2D gStippleTriStripPrimTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gStippleTriStripPrimTex_>; };

// Triangle strip index texture structure
// index value of current triangle strip
uniform highp texture2D gStippleTriStripIndexTex_ : StippleTriangleStripIndexTexture ;
uniform highp sampler2D gStippleTriStripIndexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gStippleTriStripIndexTex_>; };

attribute VS_INPUT
{
    int VertexID : TEXCOORD0;
    int InstanceID : TEXCOORD1;
};

attribute VS_TO_PS
{
    vec4 vso_pos;
    vec4 vso_color;
    flat int vso_stipple_indexS;
};

attribute pixelOut
{
    vec4 pso_color : COLOR0;
};

GLSLShader StippleTriangleStrip_VS
{

void load_current_vertex(uint offset, out vec2 pos, out uint prim_id)
{
    ivec2 ver_offset = get_ptex_offset(offset);
    vec4 val = texelFetch(gStippleTriStripVertexTex, ver_offset, 0);

    pos = val.xy;
    prim_id = floatBitsToUint(val.z);
}

void load_primitive(uint prim_id, out float drawZ,
                    out bool isLogical,
                    out uint color,
                    out uint stipple_index)
{
    ivec2 offset = get_ptex_offset(prim_id);
    vec4 prims = texelFetch(gStippleTriStripPrimTex, offset, 0);

    drawZ = abs(prims.x);
    isLogical = get_logical_space(prims.x);

    color = floatBitsToUint(prims.y);
    stipple_index = floatBitsToUint(prims.z) & uint(0xffff);
}

void load_triangle_info(uint ver_index, out StippleTriVertexAttr attr)
{
    load_current_vertex(ver_index, attr.pos, attr.prim_id);

    load_primitive(attr.prim_id, attr.drawZ, 
                   attr.isLogical,
                   attr.color,
                   attr.stipple_index);
}

void main()
{
    StippleTriVertexAttr attr = StippleTriVertexAttr(vec2(0.0f, 0.0f), uint(0), 0.0f, uint(0), false, uint(0));

    uint vtx_id = load_tri_id_from_tex(gStippleTriStripIndexTex, uint(gl_VertexID));
    load_triangle_info(vtx_id, attr);

    VertexAttr_Stipple_Triangle outputData = VertexAttr_Stipple_Triangle(vec4(0.0f, 0.0f, 0.0f, 0.0f),
                                                                         vec4(0.0f, 0.0f, 0.0f, 0.0f), uint(0));
    set_stipple_triangle_properties(attr, outputData);

    gl_Position = outputData.position;

    vso_pos = outputData.position;
    vso_color = outputData.color;
    vso_stipple_indexS = int(outputData.stipple_index);
}

}

GLSLShader StippleTriangle_PS
{

void main()
{
    vec2 pixelPos = vso_pos.xy * vec2(0.5f, 0.5f) + vec2(0.5f, 0.5f);
    pixelPos *= gScreenSize;
    // pixelPos.y = gScreenSize.y - pixelPos.y;

    vec4 final_color = neutron_sketch_stipple_apply(vso_color, pixelPos, uint(vso_stipple_indexS));
    if (final_color.a < 0.01f)
        discard;
    pso_color = OIT_PS_OUTPUT(final_color, vso_pos);  
}

}

technique StippleTriangleStrip
{
    pass P0
    {
        VertexShader (in VS_INPUT, out VS_TO_PS) = StippleTriangleStrip_VS;
        PixelShader (in VS_TO_PS, out pixelOut) = StippleTriangle_PS;
    }
}

