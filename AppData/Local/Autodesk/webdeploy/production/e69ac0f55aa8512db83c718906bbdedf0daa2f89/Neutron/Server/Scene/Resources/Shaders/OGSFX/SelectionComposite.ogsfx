// World-view-projection transformation.
uniform mat4 gWVPXf : WorldViewProjection;

uniform vec2 gFinalres : ViewportPixelSize;

// The lines filter input
uniform texture2D gLines;

// Filter input sampler.
uniform sampler2D LinesSampler = sampler_state
{
    Texture = <gLines>;
};

// The selection mask
uniform texture2D gMask;

// Filter mask sampler.
uniform sampler2D MaskSampler = sampler_state
{
    Texture = <gMask>;
};

// The glow filter input
uniform texture2D gGlow;

// Filter input sampler.
uniform sampler2D GlowSampler = sampler_state
{
    Texture = <gGlow>;
};

// The halo input
uniform texture2D gHalo;

// Filter input sampler.
uniform sampler2D HaloSampler = sampler_state
{
    Texture = <gHalo>;
};

uniform bool gUseBase = true;
uniform bool gUseHalo = true;
uniform bool gUseBaseHaloColor = true;
uniform bool gUseGlow = true;
uniform bool gUseLines = true;

uniform vec4 gVisibleLineMask = {0.0, 0.0, 0.0, 1.0};
uniform vec4 gMaskColor = {0.0, 0.0, 0.0, 1.0};
uniform vec4 gMaskBackFaceColor = {1.0, 0.0, 0.0, 1.0};
uniform vec4 gLineColor = {0.0, 0.0, 0.0, 0.0};
uniform vec4 gHiddenLineColor = {0.18, 0.25, 0.49, 1.0};
uniform vec4 gGlowColor = {0.0, 0.0, 0.0, 0.0};
uniform vec4 gBaseColor = {0.0, 0.0, 1.0, 0.5};
uniform vec4 gBackFaceColor = {0.0, 0.0, 1.0, 0.1};
uniform vec4 gHaloColor = {0.5, 0.5, 0.5, 1.0};

// Vertex shader input structure.
attribute VS_INPUT
{
    vec4 Pos : POSITION;
    vec3 UV : TEXCOORD0;
};

// Vertex shader output structure.
attribute VS_TO_PS
{
    vec4 HPos : POSITION;
    vec3 VsUV : TEXCOORD0;
};

attribute pixelOut {
    vec4 colorOut:COLOR0;
}


// Vertex shader.
GLSLShader VS_NPR {
	void main ()
	{    
		// Transform the position from object space to clip space for output.
		HPos = gWVPXf * Pos;
    
		// Pass the texture coordinates unchanged.
		VsUV = UV;
    
		gl_Position = HPos;
	}
}

GLSLShader PS_NPR {

	bool compareColors(in vec3 a, in vec3 b)
	{	
		if((a[0]!=b[0]) || (a[1]!=b[1]) || (a[2]!=b[2])) 
		{
			return false;
		}
		return true;
	}

	// This function sets the base colors on pixels that are
	// inside the selection mask. Mask back face pixels and front 
	// face pixels gets different colors. 
	vec4 GetBase( in vec4 mask)
	{

		//Set base color if inside the mask
		if(compareColors(mask.rgb,gMaskColor.rgb)) 
		{
			return gBaseColor;
		}
		if(compareColors(mask.rgb,gMaskBackFaceColor.rgb)) 
		{
			return gBackFaceColor;
		}
    
		return vec4(0,0,0,0);
	}

	// To "precomposite", just composite all the layers back to front on
	// top of a black and fully-transparent destination.
	// Then you can take the resulting image and composite it on top of the underlying
	// image normally. Both operations use the normal blending operations:
	//
	// dest.rgb' = dest.rgb * src.a + src.rgb    - here src is assumed to be premultiplied by alpha
	// dest.a' = src.a + dest.a * (1 - src.a) (alternately: dest.a + src.a * (1 - dest.a), it's the same)

	void specialBlend( inout vec4 dest, in vec4 source )
	{
		dest = vec4( lerp( dest.rgb, source.rgb, source.a ), 
			source.a + dest.a * ( 1.0 - source.a ) );
	}

	// Pixel shader.
	void main()
	{
		vec2 texCoord = VsUV.xy;
    
		vec4 lines, glow, mask, halo, all;
    
		// can be float4( scene.rgb,  ) if main scene is provided as input
		// Else, we make this a true compositing layer, with all 0's where nothing is happening.
		all = vec4( 0.0, 0.0, 0.0, 0.0 );
    
		mask = texture2D(MaskSampler, texCoord);
    
    
		if(gUseBase)
		{
			// blend in the base color
			specialBlend( all, GetBase(mask) );
		}
		else
		{
			specialBlend( all, mask );
		}
    
		if(gUseLines){
			lines = texture2D(LinesSampler, texCoord);	
        
			vec4 lineColor;
			if(lines.a==1.0 && lines.r == gVisibleLineMask.r )
			{
				lineColor = gLineColor;
			}
			else
			{
				lineColor = gHiddenLineColor;
			}
        
			specialBlend( all, vec4( lineColor.rgb, lines.a * lineColor.a ));
		}

		if(gUseLines)
		{
			glow = texture2D(GlowSampler, texCoord);
			// note that maskedGlow.rgb is not used!
			//float4 maskedGlow = float4(lerp(glow.rgb,mask.rgb ,1-mask.a),(mask.a*glow.a*gGlowColor.a));
			//specialBlend( all, float4( gGlowColor.rgb, maskedGlow.a ) );
			// revised code:
			vec4 lineColor;
			if(glow.a==1.0 && glow.r == gVisibleLineMask.r )
			{
				lineColor = gGlowColor;
			}
			else
			{
				lineColor = gHiddenLineColor;
			}
			specialBlend( all, vec4( lineColor.rgb, glow.a*lineColor.a ) );
		}
    
		if(gUseHalo)
		{
			halo = texture2D(HaloSampler, texCoord);
			if(halo.a > 0.5)
			{
				if(gUseBaseHaloColor)
				{
					specialBlend( all, gHaloColor);
				}
				else
				{
					specialBlend( all, vec4(halo.rgb, gHaloColor.a));
				}
			}
		}
    
		colorOut = all;
	}
}

technique Main
{
    pass P0
    {
        VertexShader (in VS_INPUT,out VS_TO_PS) = VS_NPR;
        PixelShader (in VS_TO_PS, out pixelOut) = PS_NPR;
    }
}
