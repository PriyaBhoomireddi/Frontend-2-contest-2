//#define LOCAL_VIEWER
#define FLIP_BACKFACING_NORMALS
#define CLIPPING

#define LIGHT_DIRECTIONAL_MULTIPLE

#ifdef CLIPPING
#include "Clipping.ogsfh"
#endif

#include "LightArray.ogsfh"

// World transformation.
uniform mat4 gWXf : World;

// World transformation, inverse transpose.
uniform mat4 gWITXf : WorldInverseTranspose;

// World-View-projection transformation.
uniform mat4 gWVPXf : WorldViewProjection;

#ifdef LOCAL_VIEWER
	uniform mat4 gVIXf : ViewInverse;
#else
	uniform vec3 gViewDirection : ViewDirection;
#endif

uniform vec3  gPullDirection : PullDirection = { 0.0, 0.0, 1.0 };                   

uniform float  gDraftAnglePositive : DraftAnglePositive = 0.0; 

uniform float  gDraftAngleNegative : DraftAngleNegative = 0.0; 

uniform float  gToleranceAnglePositive : ToleranceAnglePositive = 0.0; 

uniform float  gToleranceAngleNegative : ToleranceAngleNegative = 0.0; 

// Emissive color.
uniform vec3 gEmiColor : Emissive = {0.0, 0.0, 0.0};

// Ambient color.
uniform vec3 gAmbColor : Ambient = {1.0, 1.0, 1.0};

// Diffuse color.
uniform vec3 gDiffColor : Diffuse = {1.0, 1.0, 1.0};

// Specular color.
uniform vec3 gSpecColor : Specular = {1.0, 1.0, 1.0};

// Glossiness (specular power).
uniform float gGlossiness : SpecularPower = 32.0;

// Opacity factor.
uniform float gOpacity : Opacity = 1.0;

// Depth priority, which shifts the model a bit forward in the z-buffer
uniform float gDepthPriority : DepthPriority = 0.0;

attribute VS_INPUT
{
    vec3 Pos  : POSITION;
    vec3 Normal  : NORMAL;
};

attribute VS_TO_PS
{
    vec4 HPos       : POSITION;
	vec3 WorldNormal    : TEXCOORD0;
#ifdef CLIPPING
    // World position, for CLIPPING
    vec4 HPw 	: TEXCOORD1;
#endif
    vec3 Diff : COLOR0; 
    vec3 Spec : COLOR1;
};

attribute pixelOut {
    vec4 colorOut:COLOR0;
}

GLSLShader draftVS{
	void main()
	{
		vec4 P = vec4(Pos, 1.0);
		// Transform the position and normal to world space for lighting, and normalize the normal.
		vec4 HPwT = gWXf *P;
		vec3 Nw = normalize((gWITXf * vec4(Normal, 0.0)).xyz);
    
#ifdef LOCAL_VIEWER
		// Compute the view direction, using the eye position and vertex position.  The eye
		// position is the translation vector of the inverse view transformation matrix.  This
		// provides more accurate lighting highlights and environment-mapped reflections than
		// using a non-local viewer (below).
		vec3 Vw = HPwT - gVIXf[3];
		vec3 VwNorm = normalize(Vw);    
#else
		// Use the fixed view direction, the same for the entire view.  Use of this vector is
		// similar to disabling D3DRS_LOCALVIEWER for lighting and reflection in D3D9 (the
		// default state).  This is appropriate for orthographic projections.
		vec3 VwNorm = gViewDirection;
#endif

		// Flip the normal to face the view direction, allowing proper shading of back-facing surfaces.
		// NOTE: This will lead to artifacts on the silhouettes of coarsely-tessellated surfaces.  A
		// compensation of about nine degrees is performed here (cos(99deg) ~ 0.15), so this issue
		// should be limited to triangles with very divergent normals.
#ifdef FLIP_BACKFACING_NORMALS
		Nw = -Nw * sign(dot(VwNorm, Nw));
#endif

		WorldNormal  = Nw; 	  
		HPos         = gWVPXf * P; 
    
		// Compute the ambient, diffuse, and specular lighting components from the light array.
		vec3 amb = vec3(0.0, 0.0, 0.0);
		vec3 spec = vec3(0.0, 0.0, 0.0);
    
		// Use the glossiness value.
		ComputeLighting(Nw, -VwNorm, HPw.xyz, gGlossiness, amb, Diff.rgb, spec);
		Diff.rgb *= gDiffColor;
		Diff.rgb += gAmbColor * amb + gEmiColor;
		Spec = gSpecColor * spec;

		// Clamp the diffuse and specular components to [0.0, 1.0] to match the limitations of COLOR
		// registers in SM 2.0.  Otherwise the final color output will not match.
		Diff = saturate(Diff); 

		// modify the HPos a bit by biasing the Z a bit forward, based on depth priority
		HPos.z -= HPos.w * gDepthPriority;
	
#ifdef CLIPPING
		// On Mac, the semantic CLP(n) does not work, so we need to simulate exactly as what basic material has done
		// First compute the Pw in vertex shader, then pass the Pw to pixel shader
		HPw = gWXf * vec4(Pos, 1.0);
#endif

		gl_Position = HPos;
	}
}


GLSLSHader draftPS{
	void main()
	{

#ifdef CLIPPING
		// Compute whether the pixel needs to be discard by the clipping planes.
		bool needDiscard = false;
		if (gNumClipPlanes > 0) { if(dot(HPw, gClipPlanes[0])<0) needDiscard = true;}
		if (gNumClipPlanes > 1) { if(dot(HPw, gClipPlanes[1])<0) needDiscard = true;}
		if (gNumClipPlanes > 2) { if(dot(HPw, gClipPlanes[2])<0) needDiscard = true;}
		if (gNumClipPlanes > 3) { if(dot(HPw, gClipPlanes[3])<0) needDiscard = true;}
		if (gNumClipPlanes > 4) { if(dot(HPw, gClipPlanes[4])<0) needDiscard = true;}
		if (gNumClipPlanes > 5) { if(dot(HPw, gClipPlanes[5])<0) needDiscard = true;}
    
		if (needDiscard == true)
			discard;
#endif

		vec3 wN = WorldNormal;
		vec3 pD = normalize(gPullDirection);
	
		float vCos = wN.x*pD.x + wN.y*pD.y + wN.z*pD.z;
		float vTol = 0.000001f; // <= 0.08 deg
		vec3 draftColor;

		if (vCos > gDraftAngleNegative - vTol && vCos < gDraftAnglePositive + vTol)
		{
			// Red - range(Neg, Pos)
			draftColor = vec3(1.0f, 0.0f, 0.0f);
		}
		else if (vCos >= gToleranceAngleNegative - vTol && vCos <= gDraftAngleNegative + vTol)
		{
			// Light blue - range(TolNeg, Neg)
			draftColor = vec3(0.0f, 1.0f, 1.0f);
		}
		else if (vCos >= gDraftAnglePositive - vTol && vCos <= gToleranceAnglePositive + vTol)
		{
			// Yellow - range(Pos, TolPos)
			draftColor = vec3(1.0f, 1.0f, 0.0f);
		}
		else if (vCos < gToleranceAngleNegative + vTol)
		{
			// Blue - range(-, TolNeg)
			draftColor = vec3(0.0f, 0.0f, 1.0f);
		}
		else
		{
			// Green - range(TolPos, +)
			draftColor = vec3(0.0f, 1.0f, 0.0f);
		}

		// Start the output color with the diffuse component.  The rest of the shader adds to it.
		vec3 outputColor = Diff.rgb;
		outputColor *= draftColor;  //Treat the draft color as the diffuse texture
		// Add the specular component.
		outputColor += Spec; 
		// Final color and alpha.
		vec4 final = vec4(outputColor, gOpacity);
		colorOut = final;
	}
}

technique Draft
{
    pass P0
    {
        VertexShader (in VS_INPUT,out VS_TO_PS) = draftVS;
        PixelShader (in VS_TO_PS, out pixelOut) = draftPS;
    }
}
