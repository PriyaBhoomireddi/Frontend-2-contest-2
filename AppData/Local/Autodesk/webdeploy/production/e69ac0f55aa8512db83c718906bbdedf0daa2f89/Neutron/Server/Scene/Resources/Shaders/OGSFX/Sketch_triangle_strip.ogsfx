#version 330
#include "Sketch_triangle.ogsfh"

// Triangle strip vertex texture structure:
// 1. coordinates of vertex (2 floats)
// 2. primitive index (1 float)
uniform highp texture2D gTriStripVertexTex_ : TriangleStripVertexTexture ;
uniform highp sampler2D gTriStripVertexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gTriStripVertexTex_>; };

// Triangle strip primitive texture structure:
// 1. depth and logical flag shared value (1 float)
// 2. color (1 float)
uniform highp texture2D gTriStripPrimTex_ : TriangleStripPrimTexture ;
uniform highp sampler2D gTriStripPrimTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gTriStripPrimTex_>; };

// Since triangle strip and glow triangle strip are in one buffer, we need
// index texture to know which triangle it is.
//
// Triangle strip index texture structure
// index value of current triangle strip
uniform highp texture2D gTriStripIndexTex_ : TriangleStripIndexTexture ;
uniform highp sampler2D gTriStripIndexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gTriStripIndexTex_>; };

// Glow triangle strip index texture structure
// index value of current glow triangle strip
uniform highp texture2D gGlowTriStripIndexTex_ : GlowTriangleStripIndexTexture ;
uniform highp sampler2D gGlowTriStripIndexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gGlowTriStripIndexTex_>; };

attribute VS_INPUT
{
    int VertexID : TEXCOORD0;
    int InstanceID : TEXCOORD1;
};

attribute VS_TO_PS
{
    vec4 vso_pos;
    vec4 vso_color;
};

attribute pixelOut
{
    vec4 pso_color : COLOR0;
};

GLSLShader TriangleStrip_VS
{

void load_current_vertex(uint offset, out vec2 pos, out uint prim_id)
{
    ivec2 ver_offset = get_ptex_offset(offset);
    vec4 val = texelFetch(gTriStripVertexTex, ver_offset, 0);

    pos = val.xy;
    prim_id = floatBitsToUint(val.z);
}

void load_primitive(uint prim_id, out float drawZ,
                    out bool isLogical,
                    out uint color)
{
    ivec2 offset = get_ptex_offset(prim_id);
    vec4 prims = texelFetch(gTriStripPrimTex, offset, 0);

    drawZ = abs(prims.x);
    isLogical = get_logical_space(prims.x);

    color = floatBitsToUint(prims.y);
}

void load_triangle_info(uint ver_index, out TriVertexAttr attr)
{
    load_current_vertex(ver_index, attr.pos, attr.prim_id);

    load_primitive(attr.prim_id, attr.drawZ, 
                   attr.isLogical,
                   attr.color);
}

void main()
{
    TriVertexAttr attr = TriVertexAttr(vec2(0.0f, 0.0f), uint(0), 0.0f, uint(0), false);

	uint vtx_id;

#ifdef ANALYTIC_HIGHLIGHT
		vtx_id = load_tri_id_from_tex(gGlowTriStripIndexTex, uint(gl_VertexID));
#else
		vtx_id = load_tri_id_from_tex(gTriStripIndexTex, uint(gl_VertexID));
#endif

    load_triangle_info(vtx_id, attr);

    VertexAttr_Triangle outputData = VertexAttr_Triangle(vec4(0.0f, 0.0f, 0.0f, 0.0f),
                                                     vec4(0.0f, 0.0f, 0.0f, 0.0f));
    set_triangle_properties(attr, outputData);

    gl_Position = outputData.position;

    vso_pos = outputData.position;
    vso_color = outputData.color;
}

}

GLSLShader Triangle_PS
{

void main()
{
    if (vso_color.a < 0.01f)
        discard;
    pso_color = OIT_PS_OUTPUT(vso_color, vso_pos);  
}

}

technique TriangleStrip
{
    pass P0
    {
        VertexShader (in VS_INPUT, out VS_TO_PS) = TriangleStrip_VS;
        PixelShader (in VS_TO_PS, out pixelOut) = Triangle_PS;
    }
}

