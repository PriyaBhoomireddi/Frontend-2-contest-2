#version 330
#include "Sketch_triangle.ogsfh"

// for gouraud triangles we don't need glow texture because glow on those 
// triangles will go through simple triangle pipeline with same colors on
// all vertices and with no interpolation
//
// Gourand triangle strip vertex texture structure:
// 1. coordinates of vertex (2 floats)
// 2. color (1 float)
// 3. primitive index (1 float)
uniform highp texture2D gGouraudTriStripVertexTex_ : GouraudTriangleStripVertexTexture ;
uniform highp sampler2D gGouraudTriStripVertexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gGouraudTriStripVertexTex_>; };

// Gourand triangle strip primitive texture structure:
// depth and logical flag shared value
uniform highp texture2D gGouraudTriStripPrimTex_ : GouraudTriangleStripPrimTexture ;
uniform highp sampler2D gGouraudTriStripPrimTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gGouraudTriStripPrimTex_>; };

// Gouraud triangle strip index texture structure:
// index value of current triangle strip
uniform highp texture2D gGouraudTriStripIndexTex_ : GouraudTriangleStripIndexTexture ;
uniform highp sampler2D gGouraudTriStripIndexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gGouraudTriStripIndexTex_>; };

attribute VS_INPUT
{
    int VertexID : TEXCOORD0;
    int InstanceID : TEXCOORD1;
};

attribute VS_TO_PS
{
    vec4 vso_pos;
    vec4 vso_color;
};

attribute pixelOut
{
    vec4 pso_color : COLOR0;
};

GLSLShader GouraudTriangleStrip_VS
{

void load_current_gouraud_vertex(uint offset, out vec2 pos, out uint prim_id, out uint color)
{
    ivec2 ver_offset = get_ptex_offset(offset);
    vec4 val = texelFetch(gGouraudTriStripVertexTex, ver_offset, 0);

    pos = val.xy;
    color = floatBitsToUint(val.z);
    prim_id = floatBitsToUint(val.w);
}

void load_gouraud_primitive(uint prim_id, 
					 out float drawZ)
{
    ivec2 offset = get_ptex_offset(prim_id);
    vec4 prims = texelFetch(gGouraudTriStripPrimTex, offset, 0);

    drawZ = abs(prims.x);
}

void load_gouraud_triangle_info(uint ver_index, out TriVertexAttr attr)
{
    load_current_gouraud_vertex(ver_index, attr.pos, attr.prim_id, attr.color);

    load_gouraud_primitive(attr.prim_id, attr.drawZ);
}

void main()
{
    TriVertexAttr attr = TriVertexAttr(vec2(0.0f, 0.0f), uint(0), 0.0f, uint(0), false);

    uint vtx_id = load_tri_id_from_tex(gGouraudTriStripIndexTex, uint(gl_VertexID));

    load_gouraud_triangle_info(vtx_id, attr);

    VertexAttr_Gouraud_Triangle outputData = VertexAttr_Gouraud_Triangle(vec4(0.0f, 0.0f, 0.0f, 0.0f),
                                                                     vec4(0.0f, 0.0f, 0.0f, 0.0f));
    set_gouraud_triangle_properties(attr, outputData);

    gl_Position = outputData.position;

    vso_pos = outputData.position;
    vso_color = outputData.color;
}

}

GLSLShader GouraudTriangle_PS
{

void main()
{
    if (vso_color.a < 0.01f)
        discard;
    pso_color = OIT_PS_OUTPUT(vso_color, vso_pos);  
}

}

technique GouraudTriangleStrip
{
    pass P0
    {
        VertexShader (in VS_INPUT, out VS_TO_PS) = GouraudTriangleStrip_VS;
        PixelShader (in VS_TO_PS, out pixelOut) = GouraudTriangle_PS;
    }
}

