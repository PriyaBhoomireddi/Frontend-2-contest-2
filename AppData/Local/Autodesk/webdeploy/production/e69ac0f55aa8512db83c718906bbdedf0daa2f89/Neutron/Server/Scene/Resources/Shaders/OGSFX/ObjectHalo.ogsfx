// World-view-projection transformation.
uniform mat4 gWVPXf : WorldViewProjection;

uniform vec3 gFinalres : ViewportPixelSize;

uniform int gHaloWidth = 2;

//For some unknown reason, on Mac Intel HD 3000 graphics card, if we get HaloWidth from the variable "gHaloWidth" above, the system(OS) will hang
//Since in Neutron the default HaloWidth is 2, to work around the problem, we just hardcode the HaloWidth to 2 here
#ifndef HALO_WIDTH
#define HALO_WIDTH 2
#endif

// Filter input sampler.
uniform texture2D gObjectID;

uniform sampler2D ObjectIDSampler = sampler_state
{
    Texture = <gObjectID>;
};

uniform texture2D gDepth;

uniform sampler2D DepthSampler = sampler_state
{
    Texture = <gDepth>;
};

uniform bool gUseHaloColor = false;

uniform vec4 gScissorBox = {0.0, 0.0, 1.0, 1.0};

// Vertex shader input structure.
attribute VS_INPUT
{
    vec4 Pos : POSITION;
    vec3 UV : TEXCOORD0;
};

// Vertex shader output structure.
attribute VS_TO_PS
{
    vec4 HPos : POSITION;
    vec3 VsUV : TEXCOORD0;
};

attribute pixelOut {
    vec4 colorOut:COLOR0;
}

// Vertex shader.
GLSLShader VS_NPR {
	void main ()
	{
		// Transform the position from object space to clip space for output.
		HPos = gWVPXf * Pos;

		// Pass the texture coordinates unchanged.
		VsUV = UV;

		gl_Position = HPos;
	}
}

GLSLShader CalcH
{
    vec4 CalcHalo(in vec4 id, in float idz, in vec4 center, in float centerz, in vec4 haloColorThis, in vec4 haloColor, inout vec4 outColor)
    {
		// if center pixel and sample have different id 
		if(any(notEqual(center,id)))
        {
			if(centerz < 0.99 && idz < 0.99)
			{
				if(gUseHaloColor)
					outColor = haloColorThis;
				else
					outColor = vec4(1.0,1.0,1.0,1.0);
			}
			else if(centerz>idz )
			{
				if(gUseHaloColor)
					outColor = haloColor;
				else
					outColor = vec4(1.0,1.0,1.0,1.0);
			}
        }

        return outColor;
    }
}

GLSLShader PS_NPR
{
    void main()
    {
		vec4 outColor = vec4(0,0,0,0);
		vec2 texCoord = VsUV.xy;
		int stepRadius = HALO_WIDTH;//Hardcode here to work around the problem on Intel HD 3000 graphics card
		float checkRadius = stepRadius +0.5;

		vec2 offset;
		vec2 sampleCoord;
		vec4 sample, center;
		float samplez, centerz;

		vec2 edgeOffset = vec2(1.0/gFinalres.x,1.0/gFinalres.y);

		// retrieve the center and its z-depth, 
		center = texture2D(ObjectIDSampler, texCoord);
		vec4 depthValue = texture2D(DepthSampler, texCoord);
		centerz = depthValue.r;
		vec4 haloColorThis = vec4(depthValue.gba,1);

		float epsilon = max(1.0/gFinalres.x,1.0/gFinalres.y);

		if(texCoord.x >= (gScissorBox.x - checkRadius * epsilon)
			&& texCoord.x <= (gScissorBox.x + gScissorBox.z + checkRadius * epsilon)
			&& texCoord.y >= (gScissorBox.y - checkRadius * epsilon)
			&& texCoord.y <= (gScissorBox.y + gScissorBox.w + checkRadius * epsilon) )
		{
			// loop through all points in a square around the center point

			for ( int x = -stepRadius; x <= stepRadius; x++ )
			{
				offset.x = float(x);
				for ( int y = -stepRadius; y <= stepRadius; y++ )
				{
					offset.y = float(y);

					// is the distance to this point inside the radius?
					if (length(offset)< checkRadius )
					{   
						sampleCoord.xy = texCoord.xy + edgeOffset.xy * offset.xy;

						sample  = texture2D(ObjectIDSampler, sampleCoord);
						vec4 depthSample = texture2D(DepthSampler,sampleCoord);
						samplez = depthSample.r;
						vec4 haloColor = vec4(depthSample.gba,1);

						outColor = CalcHalo( sample, samplez, center, centerz, haloColorThis, haloColor, outColor);
					}
				}
			}
		}

		colorOut = outColor;
	}
}

technique Main
{
    pass P0
    {
        VertexShader (in VS_INPUT,out VS_TO_PS) = VS_NPR;
        PixelShader (in VS_TO_PS, out pixelOut) = PS_NPR;
    }
}
