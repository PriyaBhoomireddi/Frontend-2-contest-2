#ifndef _HQ_FX_TRIANGLE_H_
#define _HQ_FX_TRIANGLE_H_

#include "Sketch_primitive.ogsfh"

GLSLShader Sketch_triangle
{

struct TriVertexAttr
{
    vec2   pos; // vertex position
    uint   prim_id; // primitive id for triangle strip

    float  drawZ; // draw-z value
    uint   color; // vertex color
    bool   isLogical; // whether in logical coordinates
};

struct TexTriVertexAttr
{
    vec2   pos; // vertex position
    vec2   uv;  // texture coordinate

    float  drawZ; // draw-z value
    uint   color; // vertex color
    uint   isLogical; // whether in logical coordinates 
    uint   tex_index; // index of texture to sample
};

struct StippleTriVertexAttr
{
    vec2   pos; // vertex position
    uint   prim_id; // primitive id for triangle strip

    float  drawZ; // draw-z value
    uint   color; // vertex color
    bool   isLogical; // whether in logical coordinates

    uint   stipple_index; // index into the stipple texture
};

struct VertexAttr_Triangle
{
    vec4 position; // transformed  vertex position
    vec4 color;  // color
};

struct VertexAttr_Gouraud_Triangle
{
    vec4 position; // transformed  vertex position
    vec4 color;  // color to be interpolated
};

struct VertexAttr_Textured_Triangle
{
    vec4 position; // transformed  vertex position
    vec4 color;  // color
    vec2 uv;
    uint tex_index;
};

struct VertexAttr_Stipple_Triangle
{
    vec4 position; // transformed  vertex position
    vec4 color;  // color
    uint stipple_index;
};

// set properties of general triangles for pixel shader
void set_triangle_properties(TriVertexAttr attr, out VertexAttr_Triangle outputData)
{
    outputData.color = get_formatted_color(attr.color, 1.0f);

    if (gRetainMode)
    {
        outputData.position.xy = logic_to_ndc(attr.pos);
    }
    else
    {
        outputData.position.xy = attr.isLogical ? logic_to_ndc(attr.pos) : screen_to_ndc_pos(offset_screen_pos(attr.pos));
    }

    outputData.position.z = attr.drawZ;
    outputData.position.xyz = outputData.position.xyz;
    outputData.position.w = 1.0f;
}

// set properties of gouraud triangles for pixel shader
void set_gouraud_triangle_properties(TriVertexAttr attr, out VertexAttr_Gouraud_Triangle outputData)
{
    outputData.color = get_formatted_color(attr.color, 1.0f);

    if (gRetainMode)
    {
        outputData.position.xy = logic_to_ndc(attr.pos);
    }
    else
    {
        outputData.position.xy = attr.isLogical ? logic_to_ndc(attr.pos) : screen_to_ndc_pos(offset_screen_pos(attr.pos));
    }

    outputData.position.z = attr.drawZ;
    outputData.position.xyz = outputData.position.xyz;
    outputData.position.w = 1.0f;
}

// set properties of textured triangles for pixel shader
void set_textured_triangle_properties(TexTriVertexAttr attr, out VertexAttr_Textured_Triangle outputData)
{
    outputData.color = get_formatted_color(attr.color, 1.0f);
    outputData.uv = attr.uv;
    outputData.tex_index = attr.tex_index;

    if (gRetainMode)
    {
        outputData.position.xy = logic_to_ndc(attr.pos);
    }
    else
    {
        outputData.position.xy = (attr.isLogical != uint(0))? logic_to_ndc(attr.pos) : screen_to_ndc_pos(offset_screen_pos(attr.pos));
    }

    outputData.position.z = attr.drawZ;
    outputData.position.xyz = outputData.position.xyz;
    outputData.position.w = 1.0f;
}

// set properties of stipple triangles for pixel shader
void set_stipple_triangle_properties(StippleTriVertexAttr attr, out VertexAttr_Stipple_Triangle outputData)
{
    outputData.color = get_formatted_color(attr.color, 1.0f);

    if (gRetainMode)
    {
        outputData.position.xy = logic_to_ndc(attr.pos);
    }
    else
    {
        outputData.position.xy = attr.isLogical ? logic_to_ndc(attr.pos) : screen_to_ndc_pos(offset_screen_pos(attr.pos));
    }

    outputData.position.z = attr.drawZ;
    outputData.position.xyz = outputData.position.xyz;
    outputData.position.w = 1.0f;

    outputData.stipple_index = attr.stipple_index;
}

// load triangle index from index texture
uint load_tri_id_from_tex(highp sampler2D indexTex, uint id)
{
    ivec2 tex_offset = get_ptex_offset(id);
    uvec4 val = floatBitsToUint(texelFetch(indexTex, tex_offset, 0));

    return val.x;
}

}

#endif // _HQ_FX_TRIANGLE_H_
