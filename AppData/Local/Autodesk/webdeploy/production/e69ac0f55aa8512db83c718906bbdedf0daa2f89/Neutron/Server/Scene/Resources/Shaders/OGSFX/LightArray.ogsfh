//**************************************************************************/
// Copyright (c) 2013 Autodesk, Inc.
// All rights reserved.
// 
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information written by Autodesk, Inc., and are
// protected by Federal copyright law. They may not be disclosed to third
// parties or copied or duplicated in any form, in whole or in part, without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/
// DESCRIPTION: Light array parameters and functions.
// AUTHOR: Mauricio Vives, ported to OGSFX by Flavio Bortot
// CREATED: May 2013
//**************************************************************************/

#ifndef _LIGHTARRAYGL_OGSFH_
#define _LIGHTARRAYGL_OGSFH_

#include "Lighting.ogsfh"

// Define the light count.
#ifdef EXTRA_LIGHTS
    #define LIGHT_COUNT 32
#else
    #define LIGHT_COUNT 8
#endif

// The array of lights if order of light type: directional lights, followed by point lights,
// followed by spot lights.
uniform Light gLightList[LIGHT_COUNT] : LightArray;

// The number of directional lights.
uniform int gNumDirectionalLights : DirLightCount= 1;

// The number of point lights.
uniform int gNumPointLights : PointLightCount= 0;

// The number of spot lights.
uniform int gNumSpotLights : SpotLightCount= 0;


// Compute the lighting contribution from the lights in the light array.
GLSLShader LightArrayBlock 
{
void ComputeLighting(
    in vec3 Nw, in vec3 Vw, in vec3 Pw, float exp, out vec3 amb, out vec3 diff, out vec3 spec)
{
    // Set the initial color components to black.
    // Note: GLSL does NOT do/allow any implicit casting (e.g. vec4 -> vec3, or float -> vec3 as it was here) 
    amb = vec3(0.0,0.0,0.0);
    diff = vec3(0.0,0.0,0.0);
    spec = vec3(0.0,0.0,0.0);
    vec3 ambFromLight = vec3(0.0,0.0,0.0);
    vec3 diffFromLight = vec3(0.0,0.0,0.0);
    vec3 specFromLight = vec3(0.0,0.0,0.0);

#if defined(LIGHT_DIRECTIONAL_SINGLE) || defined(LIGHT_DIRECTIONAL_MULTIPLE)
#ifdef LIGHT_DIRECTIONAL_MULTIPLE
    // Loop over the directional lights, adding the ambient, diffuse, and specular contributions of
    // each one to the output values.
    
    for (int i = 0; i < gNumDirectionalLights; i++)
    {
        ComputeDirectionalLight(gLightList[i], Nw, Vw, exp,
            ambFromLight, diffFromLight, specFromLight);
#else
        ComputeDirectionalLight(gLightList[0], Nw, Vw, exp,
            ambFromLight, diffFromLight, specFromLight);
#endif
        amb  += ambFromLight;
        diff += diffFromLight;
        spec += specFromLight;
#ifdef LIGHT_DIRECTIONAL_MULTIPLE
    }
#endif
#endif
    
#if defined(LIGHT_POINT_SINGLE) || defined(LIGHT_POINT_MULTIPLE)
#ifdef LIGHT_POINT_MULTIPLE
    // Loop over the point lights, as above.
    for (int i = 0; i < gNumPointLights; i++)
    {
        ComputePointLight(gLightList[i + gNumDirectionalLights], Nw, Vw, Pw, exp,
            ambFromLight, diffFromLight, specFromLight);
#else   
        ComputePointLight(gLightList[gNumDirectionalLights], Nw, Vw, Pw, exp,
            ambFromLight, diffFromLight, specFromLight);
#endif
        amb  += ambFromLight;
        diff = diffFromLight;
        spec += specFromLight;
#ifdef LIGHT_POINT_MULTIPLE
    }
#endif
#endif

#if defined(LIGHT_SPOT_SINGLE) || defined(LIGHT_SPOT_MULTIPLE)
#ifdef LIGHT_SPOT_MULTIPLE
    // Loop over the spot lights, as above.
    // As above, cg profile issue under non-nv card
    for (int i = 0; i < gNumSpotLights; i++)
    {
        ComputeSpotLight(gLightList[i + gNumDirectionalLights + gNumPointLights], Nw, Vw, Pw, exp,
            ambFromLight, diffFromLight, specFromLight);
#else            
        ComputeSpotLight(gLightList[gNumDirectionalLights + gNumPointLights], Nw, Vw, Pw, exp,
            ambFromLight, diffFromLight, specFromLight);
#endif
        // Defect 1293496: 
        // uncomment the following three lines and comment out "amb  += ambFromLight" will fix the defect. 
        // This defect happens on ATI cards only, should be a driver bug. It seems that when "amb  += ambFromLight"
        // is excecuted, every channel is wrapped to the range of [0, 1], which is wrong.
        //amb.r  += ambFromLight.r;
        //amb.g  += ambFromLight.g;
        //amb.b  += ambFromLight.b;
        amb  += ambFromLight;
        diff += diffFromLight;
        spec += specFromLight;
#ifdef LIGHT_SPOT_MULTIPLE
    }
#endif
#endif
}
}//Close shader block
#endif // _LIGHTARRAYGL_OGSFH_
