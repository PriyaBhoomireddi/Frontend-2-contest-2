//**************************************************************************/
// Copyright 2010 Autodesk, Inc.
// All rights reserved.
// 
// This computer source code and related instructions and comments are the 
// unpublished confidential and proprietary information of Autodesk, Inc. 
// and are protected under Federal copyright and state trade secret law.
// They may not be disclosed to, copied or used by any third party without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/
// DESCRIPTION: Distance map effect.
// AUTHOR: Mauricio Vives, converted to OGSFX by Eric Haines, June 2013
// CREATED: November 2012
//**************************************************************************/


#include "Clipping.ogsfh"

// World transformation.
uniform mat4 gWXf : World;

// World-view-projection transformation.
uniform mat4 gWVPXf : WorldViewProjection;

// The plane from which distances are computed.
uniform vec4 gPlane = {0.0, 0.0, 1.0, 0.0};

// The range of distances used for normalizing the map values.
uniform vec2 gRange = {0.0, 1.0};

// Vertex shader input structure.
attribute VS_INPUT
{
    vec3 Pos : POSITION;
}

// Vertex shader output structure.
attribute VS_TO_PS
{
    // Vertex position in world space.
    float Distance : TEXCOORD0;
}

attribute pixelOut {
    vec4 colorOut:COLOR0;
}

// Vertex shader.
GLSLShader VS_DistanceMap
{
    void main()
    {
        // Transform the vertex from object space to clip space.
        gl_Position = gWVPXf*vec4(Pos, 1.0);

		// Transform the vertex from object space to world space, and compute the absolute distance from
		// the plane with a dot product.
		vec4 HPw = gWXf * vec4(Pos, 1.0);
		Distance = dot(gPlane, HPw);

		//#ifdef CLIPPING
        // Compute the world space position for clipping.
        ComputeClipDistances(gWXf*vec4(Pos, 1.0));
        //#endif
    }
}

// Pixel shader.
GLSLShader PS_DistanceMap
{
    void main()
    {

        #if GL_ES
			ClipPixels();
		#endif
		
		// Normalize the input distance in the distance range.
        float distance = saturate((abs(Distance) - gRange.x) / (gRange.y - gRange.x));

        // Use the (monochrome) distance as the output color.
        // TODO: I doubt all four channels need to be set - is that legal?
#if GL_ES
        gl_FragColor = vec4(distance, distance, distance, 1.0);
#else
        colorOut = vec4(distance, distance, distance, 1.0);
#endif
    }
}

// The main technique.
technique Main
{
    pass p0
    {
        VertexShader (in VS_INPUT, out VS_TO_PS) = VS_DistanceMap;
        PixelShader (in VS_TO_PS, out pixelOut) = PS_DistanceMap;
    }
}
