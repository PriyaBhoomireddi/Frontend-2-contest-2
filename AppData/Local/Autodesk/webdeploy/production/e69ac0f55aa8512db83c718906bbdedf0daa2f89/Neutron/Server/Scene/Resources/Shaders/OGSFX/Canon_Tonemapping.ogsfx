//**************************************************************************/
// Copyright (c) 2014 Autodesk, Inc.
// All rights reserved.
// 
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information written by Autodesk, Inc., and are
// protected by Federal copyright law. They may not be disclosed to third
// parties or copied or duplicated in any form, in whole or in part, without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/
// DESCRIPTION: Apply Canon camera response curve to incoming linear data.
//   Data should be floating point, if you're wise.
// AUTHOR: Eric Haines
// CREATED: March 2014
//**************************************************************************/

#include "Common.ogsfh"

#if MSAA_SAMPLE_COUNT > 1
    #define SCENE_TEXTURE_TYPE texture2DMS
    #define SCENE_SAMPLER_TYPE sampler2DMS
#else
    #define SCENE_TEXTURE_TYPE texture2D
    #define SCENE_SAMPLER_TYPE sampler2D
#endif

// The exposure adjustment, essentially just a scale factor to the incoming linear color
uniform float gExposureValue = 0.0;

// use analytic or texture lookup solution
uniform bool gUseTextureLookup = false;

// run in color preserving mode or not. default is to not run in color preserving mode
uniform bool gColorPreserving = false;

// The source image (beauty pass) texture and sampler.
uniform SCENE_TEXTURE_TYPE gSceneTexture;
uniform SCENE_SAMPLER_TYPE gSceneSampler = sampler_state { Texture = <gSceneTexture>; };

// The lookup texture, 1024x1, that holds the Canon camera S-Curve
uniform texture2D gLookupTexture;
uniform sampler2D gLookupSampler = sampler_state { Texture = <gLookupTexture>; };

uniform int TonemapEntries = 1024;
uniform float TonemapMin = -2.152529302052785809;
uniform float TonemapMax = 1.163792197947214113;
uniform float Shift = 1.0 / 0.18;

attribute pixelOut {
    vec4 colorOut:COLOR0;
}


// Pixel shader.
// incoming is 0 to infinity (linear color space), output is 0.0 to 1.0
GLSLShader PS_CanonCurve
{
    float AnalyticCanon( float x )
    {
        // 23.921x6 - 70.678x5 + 71.943x4 - 29.707x3 + 5.9189x2 - 0.4027x + 0.0071
        // Magic 6th order polynomial found using Excel's curve fitting feature, by Mauricio Vives
        float x2 = x  * x;
        float x3 = x  * x2;
        float x4 = x2 * x2;
        float x5 = x2 * x3;
        float x6 = x3 * x3;

        // fancy way to multiply values together;
        // I think this is actually a tiny bit slower on modern GPUs, which don't do vector operations but
        // rather do single value ops, so the 1.0 times 0.0071 is not needed.
        const vec3 coeff1 = vec3( 23.921, -70.678,  71.943);
        const vec4 coeff2 = vec4(-29.707,  5.9189, -0.4027, 0.0071);
        return dot(coeff1, vec3(x6, x5, x4)) + dot(coeff2, vec4(x3, x2, x, 1.0));
    }

    float T(float x)
    {
        // this function fits the measured Canon sigmoid *without gamma correction*
        float tmp = 1.0592 - 1.0631 / (1.0 + 4.5805 * pow(x, 1.5823));
        return clamp(tmp, 0.0, 1.0);
    }

    vec3 CanonCurve(vec3 linColor)
    {
        if (gColorPreserving)
        {
            vec3 outColor = linColor.rgb;

            // apply exposure scaling
            outColor = outColor * exp2(gExposureValue);
            
            // clamp the input to simulate finite sensor
            outColor = min(outColor, vec3(3.0, 3.0, 3.0));
            
            // apply the curve to the luminance
            float inLum = dot(vec3(0.2126, 0.7152, 0.0722), outColor);
            float outLum = T(inLum);
            
            // scale the color, preserving channel ratios
            outColor = outColor * (outLum / inLum);
            
            // clamp again
            outColor = saturate(outColor);
            
            // and apply gamma 2.2
            float gamma = 1.0/2.2;
            outColor = pow(outColor, vec3(gamma, gamma, gamma));
            return outColor;
        }
        else
        {
            // Shift curve and exposure is base 2.
            float Scale = Shift * exp2(gExposureValue);
            // if input value is 0, clamp output to be 0
            vec3 indexColor;
            // don't take the log of 0 or a negative number
            indexColor = max(linColor.rgb,0.000000001);
            // GLSL has no log10, so do log()/log(10) to get same result
            indexColor = log(max(Scale*linColor.rgb,0.000000001f))/log(10.0);
            indexColor = saturate((indexColor.rgb - TonemapMin) / (TonemapMax - TonemapMin));
            
            if (gUseTextureLookup)
            {
                // texture lookup;
                // To have 1024 equal-size buckets, need to multiply by 1023/1024 and 
                // offset by 0.5/TonemapEntries to get to center of pixel. For example, if
                // TonemapEntries was 2, we'd want samples at 0.25 and 0.75, which is what
                // this formula gives.
                // This is for a perfect match; in reality it could probably not be done for
                // large textures and no one would know.
                indexColor = (indexColor * (float(TonemapEntries - 1)/float(TonemapEntries))) + 0.5/TonemapEntries;
                // The lookup texture is made of the values from
                // //depot/Raas/current/rsut/include/rsut/camera_response_tonemap_data.hpp,
                // divided by 0-255 to be in the range 0.0 to 1.0.
                vec3 lookupColor;
                lookupColor.r = texture2D(gLookupSampler, vec2( indexColor.r, 0.5)).r;
                lookupColor.g = texture2D(gLookupSampler, vec2( indexColor.g, 0.5)).r;
                lookupColor.b = texture2D(gLookupSampler, vec2( indexColor.b, 0.5)).r;
                return lookupColor;
            }
            else
            {
                // analytic: indexColor is a value from 0.0 to 1.0
                return vec3(AnalyticCanon(indexColor.r), AnalyticCanon(indexColor.g), AnalyticCanon(indexColor.b));
            }
        }
    }

    void main()
    {
        // The extremely-confusing OGS Y-flip for OpenGL. Since gUseTextureLookup == true
        // this causes gLookupTexture to be set in the script. By setting this value, OGS
        // notes in the code that there is some texture being accessed. This causes OGS to
        // flip *all* textures when rendering quads, such as the screen-filling quad we're
        // using here. So, we need to unflip this quad here.
        vec2 linUV = gUseTextureLookup ? vec2(VSUV.x, 1.0-VSUV.y) : VSUV;

#if MSAA_SAMPLE_COUNT > 1
        vec4 sumColor = vec4(0.0, 0.0, 0.0, 0.0);
        ivec2 coord = ivec2(linUV * gScreenSize);
        for (int sampleId = 0; sampleId < MSAA_SAMPLE_COUNT; sampleId++)
        {
            vec4 linColor = texelFetch(gSceneSampler, coord, sampleId).rgba;
            vec4 tmpColor = vec4(CanonCurve(linColor.rgb), linColor.a);
            sumColor += tmpColor;
        }
        vec4 outColor = sumColor / MSAA_SAMPLE_COUNT;
#else // MSAA_SAMPLE_COUNT > 1
        vec4 linColor = texture2D(gSceneSampler, linUV).rgba;
        vec4 outColor = vec4(CanonCurve(linColor.rgb), linColor.a);
#endif // MSAA_SAMPLE_COUNT > 1

#if GL_ES
        gl_FragColor = outColor;
#else
        colorOut = outColor;
#endif

        // "undoing" alpha is possible, but not all that useful - it does not really work properly
        // for pixels with a partial alpha value. The right way is to render the whole image
        // (performing inverse alpha on the LDR backplate, if needed) and tone map it.
        // Short answer: alpha is assumed to be 1.0f, as it should be.
        //
        // Old code left just in case there's some use:
        // For compositing: If alpha is < 1.0, need to "unmultiply" by alpha so we can properly
        // tone map.
        // First, the tone map should be done to the "average" color of the surface being
        // rendered, not the color of this surface over a transparent background.
        // Actually, better is to tone map each sample, if MSAA is used; see
        // ShaderX^6, section 3.2. Not done, TODO: need to experiment with this.
        // Second, tone mapping on a premultiplied color can (and does) give
        // a premultiplied color with colors > alpha, a non-meaningful result.
        //if ( linColor.a < 1.0 )
        //{
        //    // if 0, our work here is done, as all zeros should be returned
        //    if ( linColor.a <= 0.0 )
        //    {
        //#if GL_ES
        //        gl_FragColor = vec4( 0.0f, 0.0f, 0.0f, 0.0f );
        //#else
        //        colorOut = vec4( 0.0f, 0.0f, 0.0f, 0.0f );
        //#endif
        //        return;
        //    }
        //    linColor.rgb /= linColor.a;
        //}
        // See DX10 version of shader to see use of alpha (also commented out there).
    }
}

// The main technique.
technique Main
{
    pass p0
    {
        VertexShader (in VS_INPUT_ScreenQuad, out VS_TO_PS_ScreenQuad) = VS_ScreenQuad;
        PixelShader (in VS_TO_PS_ScreenQuad, out pixelOut) = PS_CanonCurve;
    }
}


/* old reference way, incredibly slow because each shader is extremely large and heavy.

// Pixel shader.
GLSLShader PS_CanonCurve
{
    void main()
    {
        const int TonemapEntries = 1024;
        const float TonemapMin = -2.152529302052785809;
        const float TonemapMax = 1.163792197947214113;
        const float TonemapInterval = (1.0 / (TonemapMax - TonemapMin));
        float TonemapTable[1024] = float[](
			0.00000000000000000000000,
			0.00000131088496646380830,
			0.00000393128633349857570,
			0.00000785847195110798550,
			0.00001308835602067777300,
			0.00001961551392823435100,
			0.00002743320189204684200,
			0.00003653338131436497500,
			0.00004690674770102446900,
			0.00005854276398766867000,
			0.00007142969808751502300,
			0.00008555466445309974700,
			0.00010090366942353504000,
			0.00011746166010945355000,
			0.00013521257655035255000,
			0.00015413940686340456000,
			0.00017422424508915587000,
			0.00019544835142800646000,
			0.00021779221455184406000,
			0.00024123561566800992000,
			0.00026575769400756353000,
			0.00029133701340697585000,
			0.00031795162965156837000,
			0.00034557945787990965000,
			0.00037419790228793772000,
			0.00040378396623986222000,
			0.00043431442399894250000,
			0.00046576588803825885000,
			0.00049811487532980508000,
			0.00053133787234042082000,
			0.00056541139847779247000,
			0.00060031206774589525000,
			0.00063601664838651710000,
			0.00067250212030191671000,
			0.00070974573007293929000,
			0.00074772504340694468000,
			0.00078641799487052003000,
			0.00082580293478296755000,
			0.00086585867316786157000,
			0.00090656450592163217000,
			0.00094790023570825402000,
			0.00098984629260666650000,
			0.00103238371055104010000,
			0.00107549415587926670000,
			0.00111915995275433200000,
			0.00116336410550024210000,
			0.00120809031791212610000,
			0.00125332300961710270000,
			0.00129904730242308440000,
			0.00134524906993507590000,
			0.00139191494341443490000,
			0.00143903230718463150000,
			0.00148658930181723000000,
			0.00153457482511035150000,
			0.00158297853102041800000,
			0.00163179082671466170000,
			0.00168100286791698370000,
			0.00173060655272342760000,
			0.00178059451406570660000,
			0.00183096011100197780000,
			0.00188169741901333580000,
			0.00193280121948241510000,
			0.00198426698852694620000,
			0.00203609088535638540000,
			0.00208826974031355030000,
			0.00214080104275596620000,
			0.00219368292892315520000,
			0.00224691416992649960000,
			0.00230049415998788850000,
			0.00235442290504176860000,
			0.00240870101180306210000,
			0.00246332967739025300000,
			0.00251831067957940770000,
			0.00257364636775060400000,
			0.00262933965507067180000,
			0.00268539401162044230000,
			0.00274181345511392790000,
			0.00279860254633105970000,
			0.00285576638393239370000,
			0.00291331060002108680000,
			0.00297124135640848290000,
			0.00302956534152511390000,
			0.00308828976790498150000,
			0.00314742237015758950000,
			0.00320697140332949510000,
			0.00326694564154544810000,
			0.00332735437680807410000,
			0.00338820741782549670000,
			0.00344951508872730520000,
			0.00351128822752206020000,
			0.00357353818414313460000,
			0.00363627681792515240000,
			0.00369951649434979500000,
			0.00376327008089809290000,
			0.00382755094184601990000,
			0.00389237293184166490000,
			0.00395775038810516810000,
			0.00402369812109733710000,
			0.00409023140350911650000,
			0.00415736595743192940000,
			0.00422511793957846150000,
			0.00429350445952002370000,
			0.00436254265575835700000,
			0.00443224997765644720000,
			0.00450264424128325390000,
			0.00457374360490081600000,
			0.00464556654216181490000,
			0.00471813181300682720000,
			0.00479145843227096920000,
			0.00486556563603064710000,
			0.00494047284574287200000,
			0.00501619963025149230000,
			0.00509276566575704230000,
			0.00517019069386907060000,
			0.00524849442319893190000,
			0.00532769634291084880000,
			0.00540781607897167230000,
			0.00548887313324308590000,
			0.00557088683380141310000,
			0.00565387628442336200000,
			0.00573786031348952690000,
			0.00582285723174078700000,
			0.00590888499576084410000,
			0.00599596134473333150000,
			0.00608410353231480460000,
			0.00617332827747155660000,
			0.00626365171642748790000,
			0.00635508935604318320000,
			0.00644765602894593370000,
			0.00654136585072732490000,
			0.00663623217951952920000,
			0.00673226757825331170000,
			0.00682948388580201500000,
			0.00692789212375042630000,
			0.00702750231029612880000,
			0.00712832355467016890000,
			0.00723036403745952030000,
			0.00733363099518147870000,
			0.00743813070929411330000,
			0.00754386849980083220000,
			0.00765084872357951660000,
			0.00775907477753752430000,
			0.00786854910666338890000,
			0.00797927321701448650000,
			0.00809124769364760050000,
			0.00820447222346634520000,
			0.00831894564672113440000,
			0.00843466608649987020000,
			0.00855163074428679300000,
			0.00866983606542490180000,
			0.00878927778536936660000,
			0.00890995098004720470000,
			0.00903185012007461270000,
			0.00915496912855463290000,
			0.00927930144215131580000,
			0.00940484007511166110000,
			0.00953157768588373810000,
			0.00965950664595910740000,
			0.00978861911054944130000,
			0.00991890715176145520000,
			0.01005036277279304500000,
			0.01018297793382399800000,
			0.01031674467382290300000,
			0.01045165518437814000000,
			0.01058770188282770600000,
			0.01072487748425309700000,
			0.01086317507190799600000,
			0.01100258816566112800000,
			0.01114311078804400300000,
			0.01128473752750896100000,
			0.01142746359851989400000,
			0.01157128502117951500000,
			0.01171619846341945800000,
			0.01186220136373691300000,
			0.01200929199145211700000,
			0.01215746948643259100000,
			0.01230673389392450600000,
			0.01245708619430375500000,
			0.01260852832759365100000,
			0.01276106321263110000000,
			0.01291469476079888300000,
			0.01306942796035523800000,
			0.01322526903204102600000,
			0.01338222494646593000000,
			0.01354030367411022400000,
			0.01369951417278358400000,
			0.01385986637001087500000,
			0.01402137114052132100000,
			0.01418404027905010600000,
			0.01434788646869275200000,
			0.01451292334459537000000,
			0.01467916537585526100000,
			0.01484662771162643400000,
			0.01501532622823791500000,
			0.01518527748035504400000,
			0.01535649864972308900000,
			0.01552900749189263000000,
			0.01570282228133711200000,
			0.01587796153459086800000,
			0.01605444419266742500000,
			0.01623228968797571500000,
			0.01641151773682901800000,
			0.01659214828190865000000,
			0.01677420138720249500000,
			0.01695769727048606500000,
			0.01714265622557970700000,
			0.01732909855355246900000,
			0.01751704451305180800000,
			0.01770651448098276700000,
			0.01789752853004872000000,
			0.01809010655517416900000,
			0.01828426824306110200000,
			0.01848003303846086600000,
			0.01867742011420546100000,
			0.01887644834513449800000,
			0.01907713628601829700000,
			0.01927950215069836400000,
			0.01948356379855757700000,
			0.01968933873128588700000,
			0.01989684408279673500000,
			0.02010609661739635000000,
			0.02031711273181640400000,
			0.02052990846096992800000,
			0.02074449948725895200000,
			0.02096090115323366900000,
			0.02117912883791931900000,
			0.02139919743273480100000,
			0.02162112144257854700000,
			0.02184491512166991300000,
			0.02207059250026808700000,
			0.02229816741317372500000,
			0.02252765352968343100000,
			0.02275906429919878600000,
			0.02299241311582242400000,
			0.02322771332406614600000,
			0.02346497822818301500000,
			0.02370422112398009800000,
			0.02394545533000374400000,
			0.02418869421776768600000,
			0.02443395113476829300000,
			0.02468123951107088400000,
			0.02493057301046678500000,
			0.02518196545048069800000,
			0.02543543082281427000000,
			0.02569098331111550500000,
			0.02594863730586432400000,
			0.02620840741618950600000,
			0.02647030851952690600000,
			0.02673435574229577500000,
			0.02700056440150509100000,
			0.02726895004843879800000,
			0.02753952846349855300000,
			0.02781231564745346600000,
			0.02808732780910464700000,
			0.02836458134939910700000,
			0.02864409291607296700000,
			0.02892587927000647000000,
			0.02920995727451955500000,
			0.02949634388968968400000,
			0.02978505614037951400000,
			0.03007611108147336900000,
			0.03036952576052257700000,
			0.03066531752491855800000,
			0.03096350397617208400000,
			0.03126410177780453200000,
			0.03156712762602182500000,
			0.03187259812659469500000,
			0.03218052971633469200000,
			0.03249093908229028900000,
			0.03280384203527874500000,
			0.03311925400967828000000,
			0.03343719001992492100000,
			0.03375766434696075800000,
			0.03408069092854668800000,
			0.03440628321478881500000,
			0.03473445406668253900000,
			0.03506521572585503300000,
			0.03539857985879072500000,
			0.03573455736220592500000,
			0.03607315841382463500000,
			0.03641439244700464500000,
			0.03675826805259217000000,
			0.03710479301375836000000,
			0.03745397438953546000000,
			0.03780581842677214300000,
			0.03816033055385235200000,
			0.03851751559060122300000,
			0.03887737747055118600000,
			0.03923991922365974900000,
			0.03960514311170007500000,
			0.03997305085542660100000,
			0.04034364403005768300000,
			0.04071692277728030500000,
			0.04109288656743204800000,
			0.04147153589150464500000,
			0.04185286978637214900000,
			0.04223688533030780400000,
			0.04262357792654884700000,
			0.04301294436817804800000,
			0.04340498108526520000000,
			0.04379968419277065200000,
			0.04419704947616041200000,
			0.04459707268114579400000,
			0.04499974948519944200000,
			0.04540507558144062800000,
			0.04581304722494228300000,
			0.04622366057712242600000,
			0.04663691200335357000000,
			0.04705279827254006000000,
			0.04747131768460408800000,
			0.04789246823950987100000,
			0.04831624865666679000000,
			0.04874265844202795000000,
			0.04917169806787087500000,
			0.04960336905503241700000,
			0.05003767317618327400000,
			0.05047461399084710000000,
			0.05091419663818767800000,
			0.05135642772163057800000,
			0.05180131505277074700000,
			0.05224886836943023300000,
			0.05269909923725854500000,
			0.05315202109595958100000,
			0.05360764964604533600000,
			0.05406600267765721000000,
			0.05452709991371126200000,
			0.05499096333480443100000,
			0.05545761738885599700000,
			0.05592708889194147900000,
			0.05639940711393519300000,
			0.05687460389956642400000,
			0.05735271389352299800000,
			0.05783377428617229200000,
			0.05831782501357082900000,
			0.05880490881389381600000,
			0.05929507125453625100000,
			0.05978836074716803500000,
			0.06028482857995655400000,
			0.06078452898548186000000,
			0.06128751904285438500000,
			0.06179385871553655400000,
			0.06230361085693485900000,
			0.06281684070351946400000,
			0.06333361673297910300000,
			0.06385401026717363300000,
			0.06437809506723518600000,
			0.06490594775568255000000,
			0.06543764750804100000000,
			0.06597327609443906500000,
			0.06651291777097417800000,
			0.06705665884877043400000,
			0.06760458777680766800000,
			0.06815679534638546800000,
			0.06871337393425311400000,
			0.06927441762044238300000,
			0.06984002202301491100000,
			0.07041028433031575100000,
			0.07098530269888701800000,
			0.07156517670972240000000,
			0.07215000671881224800000,
			0.07273989339120480500000,
			0.07333493723015188600000,
			0.07393523916067702700000,
			0.07454090021249788800000,
			0.07515202143681716500000,
			0.07576870338183577800000,
			0.07639104549904074400000,
			0.07701914610877953800000,
			0.07765310226487282000000,
			0.07829300952554500700000,
			0.07893896178736946300000,
			0.07959105084937527500000,
			0.08024936616919441100000,
			0.08091399466119013300000,
			0.08158502039703872900000,
			0.08226252454383918600000,
			0.08294658464834787900000,
			0.08363727513686553000000,
			0.08433466685584049800000,
			0.08503882903086112900000,
			0.08574982479987683400000,
			0.08646771092793473200000,
			0.08719254147306583500000,
			0.08792436608865535100000,
			0.08866323069996003000000,
			0.08940917558666805500000,
			0.09016223575358466000000,
			0.09092244104726068800000,
			0.09168981646864288200000,
			0.09246438248417045100000,
			0.09324615423540354200000,
			0.09403514142819195700000,
			0.09483134867406192700000,
			0.09563477530046771100000,
			0.09644541523679500700000,
			0.09726325741612154600000,
			0.09808828585264584000000,
			0.09892047901585653000000,
			0.09975981114002385700000,
			0.10060625191359132000000,
			0.10145976712993716000000,
			0.10232031754644896000000,
			0.10318785947462496000000,
			0.10406234534867334000000,
			0.10494372402046859000000,
			0.10583194152193799000000,
			0.10672694006469928000000,
			0.10762865853844865000000,
			0.10853703301441582000000,
			0.10945199730144714000000,
			0.11037348294015126000000,
			0.11130141959539944000000,
			0.11223573538024625000000,
			0.11317635760985635000000,
			0.11412321210909893000000,
			0.11507622418537851000000,
			0.11603531861710097000000,
			0.11700041982398104000000,
			0.11797145245405004000000,
			0.11894834185436788000000,
			0.11993101433146398000000,
			0.12091939712719967000000,
			0.12191341928344762000000,
			0.12291301105711647000000,
			0.12391810427806456000000,
			0.12492863296287862000000,
			0.12594453385254717000000,
			0.12696574631476570000000,
			0.12799221252467044000000,
			0.12902387756198311000000,
			0.13006068974784599000000,
			0.13110260062408177000000,
			0.13214956493473218000000,
			0.13320154148403648000000,
			0.13425849304661031000000,
			0.13532038621944703000000,
			0.13638719131599314000000,
			0.13745888292287087000000,
			0.13853543931695544000000,
			0.13961684316298320000000,
			0.14070308098836534000000,
			0.14179414368934376000000,
			0.14289002663161302000000,
			0.14399072851779698000000,
			0.14509625194417841000000,
			0.14620660163556873000000,
			0.14732178671031737000000,
			0.14844182027141692000000,
			0.14956671877260644000000,
			0.15069650183020644000000,
			0.15183119231216152000000,
			0.15297081546508245000000,
			0.15411539934870894000000,
			0.15526497684227880000000,
			0.15641958422492391000000,
			0.15757925306900339000000,
			0.15874402078722888000000,
			0.15991392622536402000000,
			0.16108900996274830000000,
			0.16226931503545491000000,
			0.16345488489156118000000,
			0.16464576341887768000000,
			0.16584199524141438000000,
			0.16704362556070354000000,
			0.16825069984648514000000,
			0.16946326398658304000000,
			0.17068136289725824000000,
			0.17190504137633875000000,
			0.17313434385670692000000,
			0.17436931382087395000000,
			0.17560999312950390000000,
			0.17685642357819439000000,
			0.17810864608601379000000,
			0.17936669922536477000000,
			0.18063062011962627000000,
			0.18190044525790811000000,
			0.18317620939948295000000,
			0.18445794539334520000000,
			0.18574568423508361000000,
			0.18703945342408040000000,
			0.18833928011936563000000,
			0.18964519043819486000000,
			0.19095720784721112000000,
			0.19227535268472681000000,
			0.19359964433527416000000,
			0.19493010090129245000000,
			0.19626673835984118000000,
			0.19760957034903867000000,
			0.19895860905253168000000,
			0.20031386626715522000000,
			0.20167535209144394000000,
			0.20304307294897783000000,
			0.20441703512717166000000,
			0.20579724443569941000000,
			0.20718370553291443000000,
			0.20857642182242478000000,
			0.20997539591059111000000,
			0.21138063001396321000000,
			0.21279212593456467000000,
			0.21420988536088170000000,
			0.21563390998363621000000,
			0.21706420196549009000000,
			0.21850076377989355000000,
			0.21994359554314771000000,
			0.22139269884735882000000,
			0.22284807767319864000000,
			0.22430973618122618000000,
			0.22577767936870657000000,
			0.22725191297713887000000,
			0.22873244308032051000000,
			0.23021927865519798000000,
			0.23171243071147124000000,
			0.23321190998630079000000,
			0.23471772936653640000000,
			0.23622990324145751000000,
			0.23774844784021859000000,
			0.23927338289793651000000,
			0.24080472865505440000000,
			0.24234250664609716000000,
			0.24388674009811981000000,
			0.24543745414667922000000,
			0.24699467656377980000000,
			0.24855843656267795000000,
			0.25012876394115785000000,
			0.25170569121433012000000,
			0.25328925374699723000000,
			0.25487948477892930000000,
			0.25647641900806489000000,
			0.25808009441945762000000,
			0.25969055146200343000000,
			0.26130782898267757000000,
			0.26293196632715315000000,
			0.26456300492922558000000,
			0.26620098625337296000000,
			0.26784595096962216000000,
			0.26949793864495575000000,
			0.27115698903593333000000,
			0.27282314164514704000000,
			0.27449643709525468000000,
			0.27617691274544726000000,
			0.27786460493592785000000,
			0.27955954850125569000000,
			0.28126177693150550000000,
			0.28297131817586840000000,
			0.28468820059989441000000,
			0.28641245052768211000000,
			0.28814408903522243000000,
			0.28988313425171874000000,
			0.29162960119282877000000,
			0.29338350212920428000000,
			0.29514484440716082000000,
			0.29691363245789115000000,
			0.29868986514844753000000,
			0.30047353859030174000000,
			0.30226464505024825000000,
			0.30406316921872295000000,
			0.30586909337780116000000,
			0.30768239588257662000000,
			0.30950304900178427000000,
			0.31133101999358048000000,
			0.31316627247011791000000,
			0.31500876495324498000000,
			0.31685845128879697000000,
			0.31871528002389377000000,
			0.32057919477568864000000,
			0.32245013520876187000000,
			0.32432803696515100000000,
			0.32621283102666426000000,
			0.32810444533716882000000,
			0.33000280470051607000000,
			0.33190783083364933000000,
			0.33381944132305597000000,
			0.33573754888108071000000,
			0.33766206577833785000000,
			0.33959290209225396000000,
			0.34152996644475936000000,
			0.34347316614559087000000,
			0.34542240504158822000000,
			0.34737758707716271000000,
			0.34933861738373062000000,
			0.35130540118171216000000,
			0.35327784329390133000000,
			0.35525584906542967000000,
			0.35723932337684039000000,
			0.35922817401743745000000,
			0.36122231084731282000000,
			0.36322164592761119000000,
			0.36522609264020217000000,
			0.36723556808201147000000,
			0.36924999288992061000000,
			0.37126929082533633000000,
			0.37329338936256895000000,
			0.37532222004416022000000,
			0.37735571868336704000000,
			0.37939382583202313000000,
			0.38143648600646551000000,
			0.38348364855204065000000,
			0.38553526840198238000000,
			0.38759130601099578000000,
			0.38965172544016069000000,
			0.39171649576810713000000,
			0.39378559192560636000000,
			0.39585899447521372000000,
			0.39793668858420195000000,
			0.40001866423575355000000,
			0.40210491515693420000000,
			0.40419543968127958000000,
			0.40629024076699422000000,
			0.40838932561767105000000,
			0.41049270615725525000000,
			0.41260039738423693000000,
			0.41471241521131713000000,
			0.41682878010934371000000,
			0.41894951742984560000000,
			0.42107465252253345000000,
			0.42320421092984190000000,
			0.42533822090586199000000,
			0.42747671180759100000000,
			0.42961971301135932000000,
			0.43176725364264251000000,
			0.43391936046680674000000,
			0.43607606183968156000000,
			0.43823738611657492000000,
			0.44040335773223699000000,
			0.44257399819556231000000,
			0.44474932507001219000000,
			0.44692935325891703000000,
			0.44911409386240481000000,
			0.45130355384604576000000,
			0.45349773482886202000000,
			0.45569663301011759000000,
			0.45790023982700589000000,
			0.46010853983663602000000,
			0.46232151077746864000000,
			0.46453912453157054000000,
			0.46676134660161916000000,
			0.46898813290187641000000,
			0.47121943186504706000000,
			0.47345518549308446000000,
			0.47569532686380839000000,
			0.47793978042805213000000,
			0.48018846157767431000000,
			0.48244127783042673000000,
			0.48469812843112015000000,
			0.48695890362675331000000,
			0.48922348521953246000000,
			0.49149174759608205000000,
			0.49376355371135439000000,
			0.49603875854418855000000,
			0.49831721014172659000000,
			0.50059874823894968000000,
			0.50288320494518224000000,
			0.50517040518328682000000,
			0.50746016612693745000000,
			0.50975229785067677000000,
			0.51204660440997884000000,
			0.51434288376115234000000,
			0.51664092821882768000000,
			0.51894052389162060000000,
			0.52124145314371795000000,
			0.52354349419218815000000,
			0.52584642137608828000000,
			0.52815000576382665000000,
			0.53045401527743030000000,
			0.53275821642521282000000,
			0.53506237508157650000000,
			0.53736625601800625000000,
			0.53966962297783216000000,
			0.54197224028127522000000,
			0.54427387356218171000000,
			0.54657429066948993000000,
			0.54887326113828661000000,
			0.55117055680246196000000,
			0.55346595352122174000000,
			0.55575923094207347000000,
			0.55805017317887107000000,
			0.56033856933962001000000,
			0.56262421480804459000000,
			0.56490691054227293000000,
			0.56718646396714190000000,
			0.56946268927070243000000,
			0.57173540849185889000000,
			0.57400445220820195000000,
			0.57626965787645446000000,
			0.57853087171194562000000,
			0.58078794900345010000000,
			0.58304075569036284000000,
			0.58528916595661995000000,
			0.58753306295752694000000,
			0.58977233960095199000000,
			0.59200689797413808000000,
			0.59423664955317812000000,
			0.59646151632989264000000,
			0.59868142982249173000000,
			0.60089632898011347000000,
			0.60310616089033531000000,
			0.60531088893588314000000,
			0.60751048149581832000000,
			0.60970491652600767000000,
			0.61189417995180284000000,
			0.61407826503430063000000,
			0.61625717389897383000000,
			0.61843091683567741000000,
			0.62059951190831109000000,
			0.62276298337689329000000,
			0.62492136083110650000000,
			0.62707468037396608000000,
			0.62922298487849038000000,
			0.63136632428316497000000,
			0.63350475018222119000000,
			0.63563831752456235000000,
			0.63776708688196482000000,
			0.63989112214714572000000,
			0.64201048867557364000000,
			0.64412525333497728000000,
			0.64623548521704666000000,
			0.64834125400157994000000,
			0.65044263051657525000000,
			0.65253968536160845000000,
			0.65463248741702229000000,
			0.65672110725467248000000,
			0.65880561293352002000000,
			0.66088607214970196000000,
			0.66296254830623602000000,
			0.66503510182371095000000,
			0.66710379099863659000000,
			0.66916867000144964000000,
			0.67122978978939640000000,
			0.67328719832189832000000,
			0.67534093966526487000000,
			0.67739105273608646000000,
			0.67943757174932029000000,
			0.68148052610266174000000,
			0.68351994077180811000000,
			0.68555583530538966000000,
			0.68758822454422153000000,
			0.68961712174962064000000,
			0.69164253234652806000000,
			0.69366445393509979000000,
			0.69568288070120121000000,
			0.69769780249343516000000,
			0.69970920430483652000000,
			0.70171706690368874000000,
			0.70372136629782522000000,
			0.70572207619347149000000,
			0.70771916420167447000000,
			0.70971259276297294000000,
			0.71170232202565142000000,
			0.71368830885597045000000,
			0.71567050712721503000000,
			0.71764886776419290000000,
			0.71962333857608007000000,
			0.72159386469285525000000,
			0.72356039111115367000000,
			0.72552286092644713000000,
			0.72748121648750885000000,
			0.72943539817911407000000,
			0.73138534419476797000000,
			0.73333099391294276000000,
			0.73527228711358839000000,
			0.73720916393815794000000,
			0.73914156486449867000000,
			0.74106943033863493000000,
			0.74299270232693293000000,
			0.74491132510734503000000,
			0.74682524321223265000000,
			0.74873440182264150000000,
			0.75063875152317938000000,
			0.75253824418517412000000,
			0.75443283179328446000000,
			0.75632246732432651000000,
			0.75820710905971123000000,
			0.76008671761764979000000,
			0.76196125421094629000000,
			0.76383068383913688000000,
			0.76569497493987970000000,
			0.76755409796004925000000,
			0.76940802633825534000000,
			0.77125673674833028000000,
			0.77310020687980718000000,
			0.77493841656146667000000,
			0.77677134733966591000000,
			0.77859898260453975000000,
			0.78042130709809465000000,
			0.78223831012846223000000,
			0.78404997919839092000000,
			0.78585630243004601000000,
			0.78765727041089417000000,
			0.78945287439697953000000,
			0.79124310550022281000000,
			0.79302795385782243000000,
			0.79480740917683568000000,
			0.79658146046155898000000,
			0.79835009723951811000000,
			0.80011330611245768000000,
			0.80187107162922877000000,
			0.80362337931048389000000,
			0.80537021068204140000000,
			0.80711154349774095000000,
			0.80884735399652807000000,
			0.81057761562000952000000,
			0.81230229780439756000000,
			0.81402136628038335000000,
			0.81573478334981864000000,
			0.81744250831780940000000,
			0.81914449655122412000000,
			0.82084069882542499000000,
			0.82253106169032564000000,
			0.82421552784624941000000,
			0.82589403472157075000000,
			0.82756651488310262000000,
			0.82923289637136610000000,
			0.83089310385039983000000,
			0.83254705916915428000000,
			0.83419467765873290000000,
			0.83583587203181187000000,
			0.83747054994863079000000,
			0.83909861438779876000000,
			0.84071996725092990000000,
			0.84233450663490228000000,
			0.84394212467330776000000,
			0.84554270757395533000000,
			0.84713614128116077000000,
			0.84872231055036340000000,
			0.85030109939167109000000,
			0.85187238844339686000000,
			0.85343605674929868000000,
			0.85499198258487674000000,
			0.85654004363592540000000,
			0.85808011705577880000000,
			0.85961207976068854000000,
			0.86113580959054337000000,
			0.86265118563456955000000,
			0.86415808828451013000000,
			0.86565639943310591000000,
			0.86714600327123537000000,
			0.86862678723687148000000,
			0.87009864175510276000000,
			0.87156146015482050000000,
			0.87301513885079918000000,
			0.87445957953678299000000,
			0.87589468847111762000000,
			0.87732037621573933000000,
			0.87873655835045017000000,
			0.88014315589543901000000,
			0.88154009517889309000000,
			0.88292730883962534000000,
			0.88430473593678172000000,
			0.88567232180839839000000,
			0.88703001812336124000000,
			0.88837778228972530000000,
			0.88971557895969744000000,
			0.89104338154337825000000,
			0.89236116841478508000000,
			0.89366892274373433000000,
			0.89496663684654709000000,
			0.89625431119510202000000,
			0.89753195106744832000000,
			0.89879956849091547000000,
			0.90005718211468189000000,
			0.90130481700640075000000,
			0.90254250425982319000000,
			0.90377028069673304000000,
			0.90498818929849378000000,
			0.90619627851633300000000,
			0.90739460233227087000000,
			0.90858321981420265000000,
			0.90976219484328102000000,
			0.91093159582177985000000,
			0.91209149497824327000000,
			0.91324196841905825000000,
			0.91438309545637786000000,
			0.91551495797822968000000,
			0.91663764181350516000000,
			0.91775123532807257000000,
			0.91885582794021170000000,
			0.91995151076104309000000,
			0.92103837832908397000000,
			0.92211652572427294000000,
			0.92318604780006164000000,
			0.92424704006541880000000,
			0.92529959838809062000000,
			0.92634381849101832000000,
			0.92737979570398299000000,
			0.92840762449543435000000,
			0.92942739842767075000000,
			0.93043920933544633000000,
			0.93144314594099897000000,
			0.93243929870691833000000,
			0.93342775547858359000000,
			0.93440860033305473000000,
			0.93538191488202072000000,
			0.93634777795226432000000,
			0.93730626519565752000000,
			0.93825744967784264000000,
			0.93920140120619033000000,
			0.94013818637187552000000,
			0.94106786818821730000000,
			0.94199050628183012000000,
			0.94290615773009123000000,
			0.94381487468793812000000,
			0.94471670527925300000000,
			0.94561169390579147000000,
			0.94649988140114960000000,
			0.94738130416689070000000,
			0.94825599430488972000000,
			0.94912398032957723000000,
			0.94998528698162177000000,
			0.95083993545210443000000,
			0.95168794275368795000000,
			0.95252932172186588000000,
			0.95336408094230429000000,
			0.95419222576030760000000,
			0.95501375828269608000000,
			0.95582867650371872000000,
			0.95663697465061825000000,
			0.95743864335892670000000,
			0.95823367003774995000000,
			0.95902203839594702000000,
			0.95980372928297331000000,
			0.96057872090770480000000,
			0.96134698854404044000000,
			0.96210850430736961000000,
			0.96286323661913242000000,
			0.96361115252898155000000,
			0.96435221715284780000000,
			0.96508639307172994000000,
			0.96581364070082976000000,
			0.96653391863300187000000,
			0.96724718373771335000000,
			0.96795339128251912000000,
			0.96865249562210520000000,
			0.96934445028088145000000,
			0.97002920747817423000000,
			0.97070671835779043000000,
			0.97137693381190315000000,
			0.97203980527196776000000,
			0.97269528356875190000000,
			0.97334331925253603000000,
			0.97398386281158944000000,
			0.97461686569496142000000,
			0.97524228003007341000000,
			0.97586005884433380000000,
			0.97647015620304412000000,
			0.97707252692718238000000,
			0.97766712791557076000000,
			0.97825391865604372000000,
			0.97883285943247800000000,
			0.97940391181866970000000,
			0.97996703782441252000000,
			0.98052220473970597000000,
			0.98106938262807808000000,
			0.98160854220003313000000,
			0.98213965580799334000000,
			0.98266269948765950000000,
			0.98317765343530861000000,
			0.98368449949130432000000,
			0.98418322177880957000000,
			0.98467380693422890000000,
			0.98515624504619637000000,
			0.98563053027149972000000,
			0.98609665832336335000000,
			0.98655462733636867000000,
			0.98700443599829335000000,
			0.98744608904779685000000,
			0.98787959534081760000000,
			0.98830496425365155000000,
			0.98872220806162170000000,
			0.98913134149601156000000,
			0.98953238133968469000000,
			0.98992534618878802000000,
			0.99031025704231279000000,
			0.99068713750784509000000,
			0.99105601504591279000000,
			0.99141691681574362000000,
			0.99176987145102602000000,
			0.99211490903648059000000,
			0.99245205836099626000000,
			0.99278135258612166000000,
			0.99310282826428808000000,
			0.99341652089314847000000,
			0.99372246519116370000000,
			0.99402069721227782000000,
			0.99431125285223732000000,
			0.99459416881319240000000,
			0.99486948230898598000000,
			0.99513723109348740000000,
			0.99539745175414651000000,
			0.99565017785581844000000,
			0.99589544536071350000000,
			0.99613329112707238000000,
			0.99636375111544306000000,
			0.99658685972518957000000,
			0.99680265140568169000000,
			0.99701116069344231000000,
			0.99721241965104102000000,
			0.99740645883338619000000,
			0.99759330863969287000000,
			0.99777299839687794000000,
			0.99794555631081572000000,
			0.99811100956398424000000,
			0.99826938407070120000000,
			0.99842070454883347000000,
			0.99856499452514058000000,
			0.99870227630867237000000,
			0.99883257098165301000000,
			0.99895589824825215000000,
			0.99907227634275009000000,
			0.99918172266530991000000,
			0.99928425343283045000000,
			0.99937988369953912000000,
			0.99946862768358902000000,
			0.99955049811588292000000,
			0.99962550663502814000000,
			0.99969366382635128000000,
			0.99975497932051072000000,
			0.99980946167245222000000,
			0.99985711810718114000000,
			0.99989795480676680000000,
			0.99993197722321192000000,
			0.99995918982788434000000,
			0.99997959628757049000000,
			0.99999319907469908000000,
			1.00000000000000000000000
        );

        vec4 linColor = texture2D(gSceneSampler, VSUV );

        // if input value is 0, clamp output to be 0
        vec3 indexColor;
        // don't take the log of 0 or a negative number
        // GLSL has no log10, so do log()/log(10) to get same result
        indexColor = log(max(gExposureValue*linColor.rgb,0.000000001f))/log(10.0);
        indexColor = saturate((indexColor.rgb - TonemapMin) / (TonemapMax - TonemapMin));
        indexColor *= (TonemapEntries - 1);

#if GL_ES
        gl_FragColor = vec4( TonemapTable[int(indexColor.r)], TonemapTable[int(indexColor.g)], TonemapTable[int(indexColor.b)], linColor.a);
#else
        colorOut = vec4( TonemapTable[int(indexColor.r)], TonemapTable[int(indexColor.g)], TonemapTable[int(indexColor.b)], linColor.a);
#endif
    }
}
*/
