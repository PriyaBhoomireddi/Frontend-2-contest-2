//**************************************************************************/
// Copyright 2010 Autodesk, Inc.
// All rights reserved.
// 
// This computer source code and related instructions and comments are the 
// unpublished confidential and proprietary information of Autodesk, Inc. 
// and are protected under Federal copyright and state trade secret law.
// They may not be disclosed to, copied or used by any third party without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/
// DESCRIPTION: Distance map effect.
// AUTHOR: Mauricio Vives
// CREATED: November 2012
//**************************************************************************/

#include "ClippingGL.cgh"

// World transformation.
float4x4 gWXf : World 
< 
    string UIWidget = "None";
    bool rowMajor = true;
>;

// World-view-projection transformation.
float4x4 gWVPXf : WorldViewProjection
< 
    string UIWidget = "None";
>;

// The plane from which distances are computed.
float4 gPlane = float4(0.0f, 0.0f, 1.0f, 0.0f);

// The range of distances used for normalizing the map values.
float2 gRange = float2(0.0f, 1.0f);

// Vertex shader input structure.
struct VS_INPUT
{
    float3 Pos : POSITION;
};

// Vertex shader output structure.
struct VS_TO_PS
{
    float4 HPos : POSITION;

    // Vertex position in world space.
    float Distance : TEXCOORD0;

    // World position for clipping
    float4 HPw : TEXCOORD1;
};

// Vertex shader.
VS_TO_PS VS_DistanceMap(VS_INPUT In)
{
    VS_TO_PS Out;
    
    // Transform the vertex from object space to clip space.
    Out.HPos = mul(gWVPXf, float4(In.Pos, 1.0f));
    
    // Transform the vertex from object space to world space, and compute the absolute distance from
    // the plane with a dot product.
    Out.HPw = mul(float4(In.Pos, 1.0f), gWXf);
    Out.Distance = dot(gPlane, Out.HPw);

    return Out;
}

// Pixel shader.
float4 PS_DistanceMap(VS_TO_PS In) : COLOR0
{
    // Compute whether the pixel need to be discard by the clipping planes.
    // This is slow, for NV4x(GeForce 6xxx) or higher card, we can use the semantic CLP(n) 
    // in vertex shader to make it faster.
    if (gNumClipPlanes > 0) { if(dot(In.HPw, gClipPlanes[0])<0) discard;}
    if (gNumClipPlanes > 1) { if(dot(In.HPw, gClipPlanes[1])<0) discard;}
    if (gNumClipPlanes > 2) { if(dot(In.HPw, gClipPlanes[2])<0) discard;}
    if (gNumClipPlanes > 3) { if(dot(In.HPw, gClipPlanes[3])<0) discard;}
    if (gNumClipPlanes > 4) { if(dot(In.HPw, gClipPlanes[4])<0) discard;}
    if (gNumClipPlanes > 5) { if(dot(In.HPw, gClipPlanes[5])<0) discard;}

    // Normalize the input distance in the distance range.
    float distance = saturate((abs(In.Distance) - gRange.x) / (gRange.y - gRange.x));

    // Use the (monochrome) distance as the output color.
    return float4(distance.xxx, 1.0f);
}

// The main technique.
technique Main
{
    pass p0
    {
        VertexProgram = compile glslv VS_DistanceMap();
        FragmentProgram = compile glslf PS_DistanceMap();
    }
}
