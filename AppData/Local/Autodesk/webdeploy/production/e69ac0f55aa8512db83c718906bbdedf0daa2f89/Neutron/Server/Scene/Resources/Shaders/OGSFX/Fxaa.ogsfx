//**************************************************************************/
// Copyright 2011 Autodesk, Inc.
// All rights reserved.
// 
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information written by Autodesk, Inc., and are
// protected by Federal copyright law. They may not be disclosed to third
// parties or copied or duplicated in any form, in whole or in part, without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/
// DESCRIPTION: FXAA edge-antialiasing post-process
// AUTHOR: Eric Haines, converted to OGSFX by Eric Haines, July 2013
// CREATED: June 2011
//**************************************************************************/

// wrap the GLSL code in the FXAA header file with OGSFX wrapper
GLSLShader FXAA_Methods
{
#define FXAA_PC 1
    // GLSL 1.3.0 or better
#define FXAA_GLSL_130 1
#define FXAA_LINEAR 0
#include "Fxaa.ogsfh"
}

// World-view-projection transformation.
uniform mat4 gWVPXf : WorldViewProjection;

uniform vec2 gFinalres : ViewportPixelSize;

// The source buffer and sampler.
uniform texture2D gSourceTex;

uniform sampler2D gSourceSamp : TextureSampler = sampler_state
{
    Texture = <gSourceTex>;
};

// Vertex shader input structure.
attribute VS_INPUT
{
    vec4 Pos : POSITION;
    vec3 UV : TEXCOORD0;
}

// Vertex shader output structure.
attribute VS_TO_PS
{
    vec3 VSUV : TEXCOORD0;
    vec4 PosPos : TEXCOORD1;
}

attribute pixelOut {
    vec4 colorOut:COLOR0;
}

// Vertex shader.
// VS_TO_PS VS_NPR(VS_INPUT In)
GLSLShader VS_NPR
{
    void main()
    {
        // Transform the position from object space to clip space for output.
        gl_Position = gWVPXf*Pos;

        // Pass the texture coordinates unchanged.
        VSUV = UV;

        vec2 rcpFrame = 1.0/vec2(gFinalres.x,gFinalres.y);
        PosPos.xy = UV.xy - (0.5 * rcpFrame);
        PosPos.zw = UV.xy + (0.5 * rcpFrame);
    }
}

// vec4 PS_FXAA(VS_TO_PS In) : COLOR0
GLSLShader PS_FXAA
{
    void main()
    {
        vec2 rcpFrame = 1.0/vec2(gFinalres.x,gFinalres.y);
        vec4 rcpFrameOpt = vec4(2.0/gFinalres.x, 2.0/gFinalres.y, 0.5/gFinalres.x, 0.5/gFinalres.y);
        vec4 rcpFrameOpt2 = vec4(-2.0/gFinalres.x, -2.0/gFinalres.y, 2.0/gFinalres.x, 2.0/gFinalres.y);

        vec3 oColor = FxaaPixelShader(vec2(VSUV.xy), PosPos, gSourceSamp, gSourceSamp, gSourceSamp,
            rcpFrame, rcpFrameOpt, rcpFrameOpt2, rcpFrameOpt2,
            0.75, 0.166, 0.0833, 8.0, 0.125, 0.05, vec4(0.0,0.0,0.0,0.0)).rgb;

        // alpha channel is set to luminance or somesuch in FXAA shader - ignore.
#if GL_ES
        gl_FragColor = vec4(oColor,1.0);
#else
        colorOut = vec4(oColor,1.0);
#endif
    }
}

// Looks for only wherever the IDs do not match; depths ignored.
technique Main
{
    pass p0
    {
        VertexShader (in VS_INPUT, out VS_TO_PS) = VS_NPR;
        PixelShader (in VS_TO_PS, out pixelOut) = PS_FXAA;
    }
}
