#version 330
#include "Sketch_oit_def.ogsfh"
#include "Sketch_primitive.ogsfh"

#ifdef ANALYTIC_STIPPLE
  #include "Sketch_stipple.ogsfh"
#endif

// Simple shape primitive texture.
// 1. center (2 floats)
// 2. size (2 floats)
// 3. depth and logical flag shared value (1 float)
// 4. shape + flags (1 float)
// 5. stipple index + glow radius (1 float)
// 6. reserved (1 float)
// 7. rotate + roundness (2 floats)
// 8. color + glow color (2 floats)
uniform highp texture2D gSimpleShapePrimTex_ : PrimitiveTexture;
uniform highp sampler2D gSimpleShapePrimTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gSimpleShapePrimTex_>; };

// Simple shape index texture.
uniform highp texture2D gSimpleShapeIndexTex_ : SimpleShapeIndexTexture;
uniform highp sampler2D gSimpleShapeIndexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gSimpleShapeIndexTex_>; };
uniform highp texture2D gSimpleShapeDrawOrderZTex_ : SimpleShapeDrawOrderZTexture;
uniform highp sampler2D gSimpleShapeDrawOrderZTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gSimpleShapeDrawOrderZTex_>; };

attribute VS_INPUT
{
    int VertexID : TEXCOORD0;
    int InstanceID : TEXCOORD1;
};

attribute VS_TO_PS
{
    vec4 vso_pos;

    flat vec2 vso_center;
    flat vec2 vso_size;
    flat float vso_rotate;
    flat float vso_roundness;

    flat int vso_shapeS;
    flat int vso_colorS;
    flat int vso_glowColorS;

#ifdef ANALYTIC_STIPPLE
    flat int vso_stippleIndexS;
#endif
};

attribute pixelOut
{
    vec4 pso_color : COLOR0;
};

GLSLShader Sketch_simple_shape
{

struct SimpleShapeAttr
{
    vec2 center;
    vec2 size;

    uint shape;
    float rotate;
    float roundness;

    bool isLogical;
    float drawZ;
    uint color;
    uint glowColor;

#ifdef ANALYTIC_STIPPLE
    uint stippleIndex;
#endif
};

struct VertexAttr_SimpleShape
{
    vec4 position; // position

    vec2 center; // center
    vec2 size; // size
    float rotate; // rotate
    float roundness; // roundness

    uint shape; // shape
    uint color; // color
    uint glowColor; // color

#ifdef ANALYTIC_STIPPLE
    uint stippleIndex; // stipple index
#endif
};

// rotate the local position relative to center in screen space
vec2 get_rotate_pos(vec2 center, float sin_rot, float cos_rot, vec2 model_pos)
{
    // rotate model pos
    vec2 rot_pos;
    rot_pos.x = model_pos.x * cos_rot - model_pos.y * sin_rot;
    rot_pos.y = model_pos.x * sin_rot + model_pos.y * cos_rot;

    // mirror model pos
    rot_pos *= neutron_sketch_lcs_matrix_scale_sign();

    // get screen pos
    return center + rot_pos;
}

// transform from local position to ndc position
vec2 get_ndc_pos(vec2 center, float sin_rot, float cos_rot, vec2 model_pos)
{
    vec2 scr_pos = get_rotate_pos(center, sin_rot, cos_rot, model_pos);
    vec2 ndc_pos = scr_pos * gInvScreenSize * 2.0f - 1.0f;
    return ndc_pos;
}

}

GLSLShader SimpleShape_VS
{

// load the simple shape index from index texture
uint load_simple_shape_id_from_tex(highp sampler2D indexTex, uint id)
{
    ivec2 tex_offset = get_ptex_offset(id);
    uvec4 val = floatBitsToUint(texelFetch(indexTex, tex_offset, 0));
    return val.x;
}

// load the vertex info from primitive texture
void load_vertex_info(uint instance_id, uint vertex_id, uint simple_shape_id, out SimpleShapeAttr attr)
{
    ivec2 offset = get_ptex_offset(simple_shape_id * uint(3));
    vec4 val = texelFetch(gSimpleShapePrimTex, offset, 0);
    attr.center = val.xy;
    attr.size = val.zw;

    offset = get_ptex_offset(simple_shape_id * uint(3) + uint(1));
    val = texelFetch(gSimpleShapePrimTex, offset, 0);
    if (gRetainMode)
    {
        load_dynamic_draworderz(instance_id, gSimpleShapeDrawOrderZTex, attr.drawZ);
        attr.isLogical = true;
    }
    else
    {
        attr.drawZ = abs(val.x);
        attr.isLogical = get_logical_space(val.x);
    }
    attr.shape = floatBitsToUint(val.y) & uint(0xffff);
#ifdef ANALYTIC_STIPPLE
    attr.stippleIndex = floatBitsToUint(val.z) & uint(0xffff);
#endif

    offset = get_ptex_offset(simple_shape_id * uint(3) + uint(2));
    val = texelFetch(gSimpleShapePrimTex, offset, 0);
    attr.rotate = val.x;
    attr.roundness = val.y;
    attr.color = floatBitsToUint(val.z);
    attr.glowColor = floatBitsToUint(val.w);
}

// set properties of simple shape for pixel shader
void set_simple_shape_properties(uint vertex_id, SimpleShapeAttr attr, out VertexAttr_SimpleShape outputData)
{
    vec2 center = attr.center;
    vec2 adjusted_size = attr.size;

    float sin_rot, cos_rot;
    sin_rot = sin(attr.rotate);
    cos_rot = cos(attr.rotate);

    if (gRetainMode)
    {
        center = logic_to_ndc(center);
        center = ndc_to_screen(center);

        adjusted_size = neutron_sketch_radius_to_screen(adjusted_size * 0.5f) * 2.0f;
    }
    else
    {
        if (attr.isLogical)
        {
            center = logic_to_ndc(center);
            center = ndc_to_screen(center);

            adjusted_size = neutron_sketch_radius_to_screen(adjusted_size * 0.5f) * 2.0f;
        }
        else
        {
            if (attr.size.x == 0.0f) adjusted_size.x = 1.0f;
            if (attr.size.y == 0.0f) adjusted_size.y = 1.0f;
        }
    }

    // LINE_WEIGHT_EXPAND + wide line expand on both sides
    vec2 adjusted_size_expand = adjusted_size + 2.0f * (vec2(1.0f, 1.0f) + vec2(1.0f, 1.0f));
    vec2 pos;
    if (vertex_id == uint(0))
        pos = 0.5f * -adjusted_size_expand;
    else if (vertex_id == uint(1))
        pos = 0.5f * vec2(adjusted_size_expand.x, -adjusted_size_expand.y);
    else if (vertex_id == uint(2))
        pos = 0.5f * vec2(-adjusted_size_expand.x, adjusted_size_expand.y);
    else
        pos = 0.5f * adjusted_size_expand;

    outputData.position.xy = get_ndc_pos(center, sin_rot, cos_rot, pos);
    outputData.position.z = attr.drawZ;
    outputData.position.xyz = outputData.position.xyz;
    outputData.position.w = 1.0f;

    outputData.center = center;
    outputData.size = adjusted_size;
    outputData.rotate = attr.rotate;
    outputData.roundness = attr.roundness;

    outputData.shape = attr.shape;
    outputData.color = attr.color;
    outputData.glowColor = attr.glowColor;

#ifdef ANALYTIC_STIPPLE
    outputData.stippleIndex = attr.stippleIndex;
#endif
}

void main()
{
    uint simple_shape_id = load_simple_shape_id_from_tex(gSimpleShapeIndexTex, uint(gl_InstanceID));

    SimpleShapeAttr attr = SimpleShapeAttr(vec2(0.0f, 0.0f), vec2(0.0f, 0.0f), uint(0), 0.0f, 0.0f, false, 0.0f
                                         , uint(0), uint(0)
#ifdef ANALYTIC_STIPPLE
                                         , uint(0)
#endif
                                         );
    load_vertex_info(uint(gl_InstanceID), uint(gl_VertexID), simple_shape_id, attr);

    VertexAttr_SimpleShape outputData = VertexAttr_SimpleShape(vec4(0.0f, 0.0f, 0.0f, 0.0f), vec2(0.0f, 0.0f)
                                                             , vec2(0.0f, 0.0f), 0.0f, 0.0f, uint(0), uint(0), uint(0)
#ifdef ANALYTIC_STIPPLE
                                                             , uint(0)
#endif
                                                             );
    set_simple_shape_properties(uint(gl_VertexID), attr, outputData);

    gl_Position = outputData.position;

    vso_pos = outputData.position;
    vso_center = outputData.center;
    vso_size = outputData.size;
    vso_rotate = outputData.rotate;
    vso_roundness = outputData.roundness;
    vso_shapeS = int(outputData.shape);
    vso_colorS = int(outputData.color);
    vso_glowColorS = int(outputData.glowColor);
#ifdef ANALYTIC_STIPPLE
    vso_stippleIndexS = int(outputData.stippleIndex);
#endif
}

}

GLSLShader SimpleShape_PS
{

// check if a pixel is in a wide-line's region.
bool inLineRegion(vec2 curPos, vec2 startPoint, vec2 endPoint, float width, vec2 dir)
{
    // get line len
    vec2 delta_line = endPoint - startPoint;
    float  line_len = length(delta_line);

    bool ret = true;

    // ignore degrading line.
    if (abs(line_len) < EPS)
        ret = false;

    // check distance to start and distance to end
    vec2 delta_to_start = curPos - startPoint;
    float dist_to_start = dot(delta_to_start, dir);

    vec2 delta_to_end = curPos - endPoint;
    float dist_to_end = dot(delta_to_end, -dir);

    // ignore out of distance range pixels.
    if ((dist_to_start > line_len + EPS))
        ret = false;

    if ((dist_to_end > line_len + EPS))
        ret = false;

    // check distance to line center line
    vec2 distance = endPoint - startPoint;

    float dist = abs(delta_line.x * delta_to_start.y - delta_line.y * delta_to_start.x) / line_len;

    // ignore the pixels far from current line
    if (ret)
        return dist < width / 2.0f + EPS;
    else
        return false;
}

void main()
{
    VertexAttr_SimpleShape inputData = VertexAttr_SimpleShape(vso_pos, vso_center, vso_size, vso_rotate, vso_roundness
                                                            , uint(vso_shapeS), uint(vso_colorS), uint(vso_glowColorS)
#ifdef ANALYTIC_STIPPLE
                                                            , uint(vso_stippleIndexS)
#endif
                                                            );
    vec4 color = vec4(0.0f, 0.0f, 0.0f, 0.0f);

    // get screen pos
    vec2 pixelPos = inputData.position.xy * vec2(0.5f, 0.5f) + vec2(0.5f, 0.5f);
    pixelPos = pixelPos * gScreenSize;
    //pixelPos.y = gScreenSize.y - pixelPos.y;

    // rotation
    float sin_rot, cos_rot;
    sin_rot = sin(inputData.rotate);
    cos_rot = cos(inputData.rotate);

    // change handness if mirror
    float det_sign = neutron_sketch_lcs_matrix_det_sign();

    if (inputData.shape == uint(0)) // FLAG_SHAPE_ROUND_RECT
    {
        // radius of the round corners (circle only!)
        float radius = inputData.roundness * min(inputData.size.x, inputData.size.y) * 0.5f;

        // the centers of the round corners
        vec2 inner_size = inputData.size - radius * 2.0f;
        if (inner_size.x <= 0.01f) inner_size.x = 0.01f;
        if (inner_size.y <= 0.01f) inner_size.y = 0.01f;
        vec2 refs[4], dirs[4];
        refs[0] = get_rotate_pos(inputData.center, sin_rot, cos_rot, 0.5f * -inner_size);
        refs[1] = get_rotate_pos(inputData.center, sin_rot, cos_rot, 0.5f * vec2(inner_size.x, -inner_size.y));
        refs[2] = get_rotate_pos(inputData.center, sin_rot, cos_rot, 0.5f * inner_size);
        refs[3] = get_rotate_pos(inputData.center, sin_rot, cos_rot, 0.5f * vec2(-inner_size.x, inner_size.y));
        dirs[0] = normalize(refs[1] - refs[0]);
        dirs[1] = normalize(refs[2] - refs[1]);
        dirs[2] = normalize(refs[3] - refs[2]);
        dirs[3] = normalize(refs[0] - refs[3]);

        // if the pixel is on the same side of the 4 lines, it's inside the rectangle
        vec4 fill_color = vec4(0.0f, 0.0f, 0.0f, 0.0f);
        vec4 dist;
        dist.x = det_sign * dist_pixel_to_line(pixelPos, dirs[0], refs[0]);
        dist.y = det_sign * dist_pixel_to_line(pixelPos, dirs[1], refs[1]);
        dist.z = det_sign * dist_pixel_to_line(pixelPos, dirs[2], refs[2]);
        dist.w = det_sign * dist_pixel_to_line(pixelPos, dirs[3], refs[3]);
        if (all(greaterThanEqual(dist, vec4(0.0f, 0.0f, 0.0f, 0.0f))))
        {
            // inside, as if in the center of a wide line
            float d = 0.0f;
            float w = max(inner_size.x, inner_size.y);
#ifdef ANALYTIC_STIPPLE
            fill_color = compute_final_color_stipple(d, w, inputData.color, inputData.glowColor, pixelPos, inputData.stippleIndex);
#else
            fill_color = compute_final_color(d, w, inputData.color, inputData.glowColor);
#endif
        }

        // if the pixel is on the same side of the 3 lines, it's outside the 4th line
        vec4 line_color = vec4(0.0f, 0.0f, 0.0f, 0.0f);
        float line_w;
        float dist_to_line = -1.0f;
        if (radius < 0.5f)
        {
            // sharp, 1px line on the border
            line_w = get_extended_line_weight(1.0f);
                 if (inLineRegion(pixelPos, refs[0], refs[1], line_w + 2.0f, dirs[0])) dist_to_line = abs(dist.x);
            else if (inLineRegion(pixelPos, refs[1], refs[2], line_w + 2.0f, dirs[1])) dist_to_line = abs(dist.y);
            else if (inLineRegion(pixelPos, refs[2], refs[3], line_w + 2.0f, dirs[2])) dist_to_line = abs(dist.z);
            else if (inLineRegion(pixelPos, refs[3], refs[0], line_w + 2.0f, dirs[3])) dist_to_line = abs(dist.w);
            if (dist_to_line >= 0.0f) dist_to_line = get_extended_dist_to_center(dist_to_line);
        }
        else if (any(lessThanEqual(dist, vec4(0.0f, 0.0f, 0.0f, 0.0f))))
        {
            // rounded, half of the wide line body
            line_w = radius * 2.0f;
                 if (all(greaterThanEqual(dist.yzw, vec3(0.0f, 0.0f, 0.0f)))) dist_to_line = abs(dist.x);
            else if (all(greaterThanEqual(dist.xzw, vec3(0.0f, 0.0f, 0.0f)))) dist_to_line = abs(dist.y);
            else if (all(greaterThanEqual(dist.xyw, vec3(0.0f, 0.0f, 0.0f)))) dist_to_line = abs(dist.z);
            else if (all(greaterThanEqual(dist.xyz, vec3(0.0f, 0.0f, 0.0f)))) dist_to_line = abs(dist.w);
        }
        if (dist_to_line >= 0.0f)
        {
            // side, as if on the side of a wide line
            float d = dist_to_line;
            float w = line_w;
#ifdef ANALYTIC_STIPPLE
            line_color = compute_final_color_stipple(d, w, inputData.color, inputData.glowColor, pixelPos, inputData.stippleIndex);
#else
            line_color = compute_final_color(d, w, inputData.color, inputData.glowColor);
#endif
        }

        // if the pixel is on the same other side of the 2 lines, it's the corner
        vec4 cap_color = vec4(0.0f, 0.0f, 0.0f, 0.0f);
        float dist_to_cap = -1.0f;
             if (all(lessThanEqual(dist.wx, vec2(0.0f, 0.0f)))) dist_to_cap = sqrt(dot(dist.wx, dist.wx));
        else if (all(lessThanEqual(dist.xy, vec2(0.0f, 0.0f)))) dist_to_cap = sqrt(dot(dist.xy, dist.xy));
        else if (all(lessThanEqual(dist.yz, vec2(0.0f, 0.0f)))) dist_to_cap = sqrt(dot(dist.yz, dist.yz));
        else if (all(lessThanEqual(dist.zw, vec2(0.0f, 0.0f)))) dist_to_cap = sqrt(dot(dist.zw, dist.zw));
        if (dist_to_cap >= 0.0f && dist_to_cap <= line_w)
        {
            // corner, as if on the cap of a wide line
            float d = radius < 0.5f ? get_extended_dist_to_center(dist_to_cap) : dist_to_cap;
            float w = line_w;
#ifdef ANALYTIC_STIPPLE
            cap_color = compute_final_color_stipple(d, w, inputData.color, inputData.glowColor, pixelPos, inputData.stippleIndex);
#else
            cap_color = compute_final_color(d, w, inputData.color, inputData.glowColor);
#endif
        }

        // select
        color = fill_color;
        if (color.a < line_color.a) color = line_color;
        if (color.a < cap_color.a)  color = cap_color;
    }
    else if (inputData.shape == uint(1)) // FLAG_SHAPE_OCTAGON
    {
        // the corners of the octagon
        vec2 hlen = inputData.size * (sqrt(2.0f) - 1.0f) * 0.5f;
        vec2 hsize = inputData.size * 0.5f;
        vec2 refs[8], dirs[8];
        refs[0] = get_rotate_pos(inputData.center, sin_rot, cos_rot, vec2(-hsize.x, -hlen.y));
        refs[1] = get_rotate_pos(inputData.center, sin_rot, cos_rot, vec2(-hlen.x, -hsize.y));
        refs[2] = get_rotate_pos(inputData.center, sin_rot, cos_rot, vec2(hlen.x, -hsize.y));
        refs[3] = get_rotate_pos(inputData.center, sin_rot, cos_rot, vec2(hsize.x, -hlen.y));
        refs[4] = get_rotate_pos(inputData.center, sin_rot, cos_rot, vec2(hsize.x, hlen.y));
        refs[5] = get_rotate_pos(inputData.center, sin_rot, cos_rot, vec2(hlen.x, hsize.y));
        refs[6] = get_rotate_pos(inputData.center, sin_rot, cos_rot, vec2(-hlen.x, hsize.y));
        refs[7] = get_rotate_pos(inputData.center, sin_rot, cos_rot, vec2(-hsize.x, hlen.y));
        dirs[0] = normalize(refs[1] - refs[0]);
        dirs[1] = normalize(refs[2] - refs[1]);
        dirs[2] = normalize(refs[3] - refs[2]);
        dirs[3] = normalize(refs[4] - refs[3]);
        dirs[4] = normalize(refs[5] - refs[4]);
        dirs[5] = normalize(refs[6] - refs[5]);
        dirs[6] = normalize(refs[7] - refs[6]);
        dirs[7] = normalize(refs[0] - refs[7]);

        // if the pixel is on the same side of the 8 lines, it's inside the octagon
        vec4 fill_color = vec4(0.0f, 0.0f, 0.0f, 0.0f);
        vec4 ldist, hdist;
        ldist.x = det_sign * dist_pixel_to_line(pixelPos, dirs[0], refs[0]);
        ldist.y = det_sign * dist_pixel_to_line(pixelPos, dirs[1], refs[1]);
        ldist.z = det_sign * dist_pixel_to_line(pixelPos, dirs[2], refs[2]);
        ldist.w = det_sign * dist_pixel_to_line(pixelPos, dirs[3], refs[3]);
        hdist.x = det_sign * dist_pixel_to_line(pixelPos, dirs[4], refs[4]);
        hdist.y = det_sign * dist_pixel_to_line(pixelPos, dirs[5], refs[5]);
        hdist.z = det_sign * dist_pixel_to_line(pixelPos, dirs[6], refs[6]);
        hdist.w = det_sign * dist_pixel_to_line(pixelPos, dirs[7], refs[7]);
        if (all(greaterThanEqual(ldist, vec4(0.0f, 0.0f, 0.0f, 0.0f))) && all(greaterThanEqual(hdist, vec4(0.0f, 0.0f, 0.0f, 0.0f))))
        {
            // inside, as if in the center of a wide line
            float d = 0.0f;
            float w = max(inputData.size.x, inputData.size.y);
#ifdef ANALYTIC_STIPPLE
            fill_color = compute_final_color_stipple(d, w, inputData.color, inputData.glowColor, pixelPos, inputData.stippleIndex);
#else
            fill_color = compute_final_color(d, w, inputData.color, inputData.glowColor);
#endif
        }

        // if the pixel is on the border of the octagon
        vec4 line_color = vec4(0.0f, 0.0f, 0.0f, 0.0f);
        float line_w = get_extended_line_weight(1.0f);
        float dist_to_line = -1.0f;
             if (inLineRegion(pixelPos, refs[0], refs[1], line_w + 2.0f, dirs[0])) dist_to_line = abs(ldist.x);
        else if (inLineRegion(pixelPos, refs[1], refs[2], line_w + 2.0f, dirs[1])) dist_to_line = abs(ldist.y);
        else if (inLineRegion(pixelPos, refs[2], refs[3], line_w + 2.0f, dirs[2])) dist_to_line = abs(ldist.z);
        else if (inLineRegion(pixelPos, refs[3], refs[4], line_w + 2.0f, dirs[3])) dist_to_line = abs(ldist.w);
        else if (inLineRegion(pixelPos, refs[4], refs[5], line_w + 2.0f, dirs[4])) dist_to_line = abs(hdist.x);
        else if (inLineRegion(pixelPos, refs[5], refs[6], line_w + 2.0f, dirs[5])) dist_to_line = abs(hdist.y);
        else if (inLineRegion(pixelPos, refs[6], refs[7], line_w + 2.0f, dirs[6])) dist_to_line = abs(hdist.z);
        else if (inLineRegion(pixelPos, refs[7], refs[0], line_w + 2.0f, dirs[7])) dist_to_line = abs(hdist.w);
        if (dist_to_line >= 0.0f)
        {
            // border, as if on the body of a wide line
            float d = get_extended_dist_to_center(dist_to_line);
            float w = line_w;
            line_color = compute_final_color(d, w, inputData.color, inputData.glowColor);
        }

        // if the pixel is on the same other side of the 2 lines, it's the corner
        vec4 cap_color = vec4(0.0f, 0.0f, 0.0f, 0.0f);
        vec4 link1 = vec4(hdist.w, ldist.x, ldist.w, hdist.x);
        float dist_to_cap = -1.0f;
             if (all(lessThanEqual(link1.xy, vec2(0.0f, 0.0f)))) dist_to_cap = distance(pixelPos, refs[0]);
        else if (all(lessThanEqual(ldist.xy, vec2(0.0f, 0.0f)))) dist_to_cap = distance(pixelPos, refs[1]);
        else if (all(lessThanEqual(ldist.yz, vec2(0.0f, 0.0f)))) dist_to_cap = distance(pixelPos, refs[2]);
        else if (all(lessThanEqual(ldist.zw, vec2(0.0f, 0.0f)))) dist_to_cap = distance(pixelPos, refs[3]);
        else if (all(lessThanEqual(link1.zw, vec2(0.0f, 0.0f)))) dist_to_cap = distance(pixelPos, refs[4]);
        else if (all(lessThanEqual(hdist.xy, vec2(0.0f, 0.0f)))) dist_to_cap = distance(pixelPos, refs[5]);
        else if (all(lessThanEqual(hdist.yz, vec2(0.0f, 0.0f)))) dist_to_cap = distance(pixelPos, refs[6]);
        else if (all(lessThanEqual(hdist.zw, vec2(0.0f, 0.0f)))) dist_to_cap = distance(pixelPos, refs[7]);
        if (dist_to_cap >= 0.0f && dist_to_cap <= line_w)
        {
            // corner, as if on the cap of a wide line
            float d = get_extended_dist_to_center(dist_to_cap);
            float w = line_w;
            cap_color = compute_final_color(d, w, inputData.color, inputData.glowColor);
        }

        // select
        color = fill_color;
        if (color.a < line_color.a) color = line_color;
        if (color.a < cap_color.a)  color = cap_color;
    }

    if (color.a < 0.01f)
        discard;
    pso_color = OIT_PS_OUTPUT(color, vso_pos);
}

}

technique SimpleShape
{
    pass P0
    {
        VertexShader (in VS_INPUT, out VS_TO_PS) = SimpleShape_VS;
        PixelShader (in VS_TO_PS, out pixelOut) = SimpleShape_PS;
    }
}

