#version 330
#include "Sketch_oit_def.ogsfh"
#include "Sketch_primitive.ogsfh"
#include "Sketch_line.ogsfh"
#include "Sketch_line_weight.ogsfh"

#ifdef ANALYTIC_STIPPLE
  #include "Sketch_stipple.ogsfh"
#endif

// draw order z texture for retain mode (bug)
uniform highp texture2D gLineCapsDrawOrderZTex_;
uniform highp sampler2D gLineCapsDrawOrderZTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gLineCapsDrawOrderZTex_>; };
// retain mode draw order z texture (bug)
uniform highp texture2D gLineJointDrawOrderZTex_;
uniform highp sampler2D gLineJointDrawOrderZTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gLineJointDrawOrderZTex_>; };

// wide line index texture
uniform highp texture2D gWideLineIndexTex_ : WideLineIndexTexture ;
uniform highp sampler2D gWideLineIndexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gWideLineIndexTex_>; };
uniform highp texture2D gWideLineDrawOrderZTex_ : WideLineDrawOrderZTexture ;
uniform highp sampler2D gWideLineDrawOrderZTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gWideLineDrawOrderZTex_>; };

attribute VS_INPUT
{
    int VertexID : TEXCOORD0;
    int InstanceID : TEXCOORD1;
};

attribute VS_TO_PS
{
    vec4 vso_position;
    flat int vso_flagS;
    flat int vso_colorS;
    flat int vso_glowColorS;
    flat int vso_widthS;
    flat int vso_shapeTypeS;
    flat int vso_subTypeS;
    flat vec2 vso_point0;
    flat vec2 vso_point1;
    flat vec2 vso_point2;
    flat vec2 vso_point3;
    float vso_dist;
#ifdef ANALYTIC_STIPPLE
    flat int vso_stippleIndexS;
#endif
};

attribute pixelOut
{
    vec4 pso_color : COLOR0;
};

GLSLShader Sketch_wide_line
{

struct VertexAttr_LineCaps
{
    vec4 position; // transformed  vertex position

    uint color;  // line color
    uint glowColor;  // glow color
    uint width;  // line width;
    uint capType;  // caps type;

    vec2 center; // cap center
    vec2 endPoint; // end point
    vec2 dir;  // cap direction

#ifdef ANALYTIC_STIPPLE
    uint stippleIndex;
#endif
};

struct VertexAttr_LineJoint
{
    vec4 position; // transformed  vertex position

    uint color;  // line color
    uint glowColor;  // glow color
    uint width;  // line width;
    uint jointType;  // joint type;

    vec2 prevPoint; // previous point
    vec2 curPoint;  // current point
    vec2 postPoint;  // post point

#ifdef ANALYTIC_STIPPLE
    uint stippleIndex;
#endif
};

struct VertexAttr_WideLine
{
    vec4 position; // transformed  vertex position

    uint flag;   // line flag
    uint color;  // line color
    uint glowColor;  // glow color
    uint width;  // line width;

    vec2 prevPoint;
    vec2 startPoint;
    vec2 endPoint;
    vec2 postPoint;

    float dist;     // distance to line

#ifdef ANALYTIC_STIPPLE
    uint stippleIndex;
#endif
};

struct VertexAttr_MetaWideLine
{
    vec4 position; // transformed  vertex position

    uint flag;   // line flag
    uint color;  // line color
    uint glowColor;  // glow color
    uint width;  // line width;
    uint shapeType;  // line shader type;
    uint subType; // caps type or joint type

     // points:
    // caps:  PNT0 = center point
    //        PNT1 = end point
    //        PNT2 = dir
    // joint: PNT0 = prev point
    //        PNT1 = current point
    //        PNT2 = post point
    // body:  PNT0 = prev point
    //        PNT1 = start point
    //        PNT2 = end point
    //        PNT3 = post point
    vec2 point0;
    vec2 point1;
    vec2 point2;
    vec2 point3;

    float dist;     // distance to line

#ifdef ANALYTIC_STIPPLE
    uint stippleIndex;
#endif
};

}

GLSLShader WideLine_VS
{

struct CapsLineAttr
{
    vec2 startPoint;
    vec2 endPoint;
    
    uint flag;
    uint color; 
    uint width; 
    float drawZ; 
    uint glowColor;
    uint capsType;
    uint isLogical;

#ifdef ANALYTIC_STIPPLE
    uint stippleIndex;
#endif
};

// get the point relating to line caps
void get_caps_points(CapsLineAttr attr, bool isEndPoint, out vec2 cur_point, out vec2 next_point)
{
    // if is first segment of polyline
    if ((attr.flag&HAS_PREV_LINE) == uint(0))
    {
        if (isEndPoint)
        {
            cur_point = attr.endPoint;
            next_point = attr.startPoint;
        }
        else
        {
            cur_point = attr.startPoint;
            next_point = attr.endPoint;
        }
    }
    // if is last segment of polyline
    else
    {
        cur_point = attr.endPoint;
        next_point = attr.startPoint;
    }
    
}

// load caps information
void load_caps_line_info(uint offset, uint line_index, uint line_flag, out CapsLineAttr attr)
{
    load_line_position(get_pos_id(offset), attr.startPoint, attr.endPoint);
    uint joint_type, lt_type;
    uint logical_width, stipple_index, logical_lt;
    load_line_attributes(line_index, attr.color, attr.width, lt_type, attr.drawZ, attr.glowColor, attr.capsType, joint_type, attr.isLogical);
    load_line_attributes_neutron_sketch(line_index, logical_width, stipple_index, logical_lt);
    load_line_flag(line_flag, attr.flag);

    adjust_line_width_wide_line_neutron_sketch(logical_width, attr.width);

#ifdef ANALYTIC_STIPPLE
    attr.stippleIndex = stipple_index;
#endif

    if (gRetainMode || (attr.isLogical != uint(0)))
    {
        adjust_line_segment_precision_logical(attr.startPoint, attr.endPoint);
    }
    else 
    {
        adjust_line_segment_precision(attr.startPoint, attr.endPoint);
    }
}

// set caps properties to output structure
void set_line_caps_properties(uint vid, bool isEndPoint, CapsLineAttr line_attr, out VertexAttr_MetaWideLine outputData)
{
    vec2 curPoint, nextPoint;
    get_caps_points(line_attr, isEndPoint,curPoint, nextPoint);

   
    outputData.color = line_attr.color;
    outputData.glowColor = line_attr.glowColor;
    outputData.width = line_attr.width;
    outputData.subType = line_attr.capsType;
    
    vec2 dir = -normalize(nextPoint - curPoint);

    outputData.point1 = offset_screen_pos(nextPoint);
    outputData.point0 = offset_screen_pos(curPoint);

    outputData.position.xy = get_caps_envelope_pos(vid, line_attr.width, 
        outputData.point0, dir);
    outputData.position.z =  line_attr.drawZ;
    outputData.position.xyz = outputData.position.xyz;
    outputData.position.w = 1.0f;
    outputData.point2 = dir;
    
    outputData.shapeType = uint(0);
    outputData.point3 = vec2(0.0f, 0.0f);
    outputData.dist = 0.0f;
    outputData.flag = uint(0);

#ifdef ANALYTIC_STIPPLE
    outputData.stippleIndex = line_attr.stippleIndex;
#endif
}

void set_logical_line_caps_properties(uint vid, bool isEndPoint, CapsLineAttr line_attr, out VertexAttr_MetaWideLine outputData)
{
    vec2 curPoint, nextPoint;
    
    float weight_expand = get_line_weight_expand(float(line_attr.width));
    vec2 uv = get_rect_pos(vid);
    
    get_caps_points(line_attr, isEndPoint, curPoint, nextPoint);
    
    vec2 screen_next_pt = logic_to_screen(nextPoint);
    vec2 screen_cur_pt = logic_to_screen(curPoint);
    vec2 ndc_cur_pt = screen_to_ndc_pos(screen_cur_pt);
    
    vec2   logic_dir = neutron_sketch_logic_dir(curPoint, nextPoint);
    float  logic_len = length(logic_dir);
    float  xoffset = 2.0f;
    vec2 dir;
    
    if (gNoAAMode != 0)
    {
        dir = -normalize(screen_next_pt - screen_cur_pt);
    }
    else
    {
        vec2 factor = gScreenSize * 0.5f;
        dir = normalize(vec2(logic_dir.x * gLCSMatrix[0].x , logic_dir.y * gLCSMatrix[1].y) * factor);
    }
    
    //check if the line is short enough to degrade to a circle.
    if (logic_len <= 100.0f)
    {
        xoffset = weight_expand*0.5f;
    }
    
    vec2 extrude = uv.x* vec2(dir.y, -dir.x) *gPixelLen* weight_expand*0.5f
        + (uv.y*0.5f + 0.5f) * dir *gPixelLen*weight_expand*0.5f
        + (1.0f - (uv.y*0.5f + 0.5f)) * (-dir) *gPixelLen* xoffset;
    
    outputData.position.xy = ndc_cur_pt + extrude;
    
    outputData.point1 = screen_next_pt;
    outputData.point0 = screen_cur_pt;
    outputData.position.z = line_attr.drawZ;
    outputData.position.xyz = outputData.position.xyz;
    outputData.position.w = 1.0f;
    
    outputData.color = line_attr.color;
    outputData.glowColor = line_attr.glowColor;
    outputData.width = line_attr.width;
    outputData.subType = line_attr.capsType;
    outputData.point2 = dir;
    
    outputData.shapeType = uint(0);
    outputData.point3 = vec2(0.0f, 0.0f);
    outputData.dist = 0.0f;
    outputData.flag = uint(0);

#ifdef ANALYTIC_STIPPLE
    outputData.stippleIndex = line_attr.stippleIndex;
#endif
}

struct JointLineAttr
{
    vec2 prevPoint;
    vec2 curPoint;
    vec2 postPoint;
    
    uint flag;
    uint color; 
    uint width; 
    float drawZ; 
    uint glowColor;
    uint jointType;
    uint isLogical;

#ifdef ANALYTIC_STIPPLE
    uint stippleIndex;
#endif
};

// adjust precision for line joint
bvec2 adjust_line_joint_precision(inout vec2 prev_point, inout vec2 cur_point, inout vec2 post_point)
{
    bvec2 out_range = bvec2(false, false);

    // if mid point in guard band, we need to adjust previous point and post point
    if ((abs(cur_point.x) <= SCR_GUARD_BAND_X) &&
        (abs(cur_point.y) <= SCR_GUARD_BAND_Y))
    {
        vec2 prev_delta = prev_point - cur_point;
        out_range.x = adjust_point_precision(prev_point, prev_delta);

        vec2 post_delta = post_point - cur_point;
        out_range.y = adjust_point_precision(post_point, post_delta);
        
    }
    return out_range;
}

// adjust precision for line joint in logical space
void adjust_line_joint_precision_logical(inout vec2 prev_point, inout vec2 cur_point, inout vec2 post_point)
{
    vec2 prevPoint = prev_point;
    vec2 curPoint = cur_point;
    vec2 postPoint = post_point;

    vec2 s_pre = ndc_to_screen(logic_to_ndc(prev_point));
    vec2 s_cur = ndc_to_screen(logic_to_ndc(cur_point));
    vec2 s_post = ndc_to_screen(logic_to_ndc(post_point));
    bvec2 needAdjust = adjust_line_joint_precision(s_pre, s_cur, s_post);

    // restore to logical space
    if (needAdjust.x)
        prev_point = ndc_to_logic(screen_to_ndc_pos(s_pre));
    else
        prev_point = prevPoint;
    cur_point = curPoint;
    if (needAdjust.y)
        post_point = ndc_to_logic(screen_to_ndc_pos(s_post));
    else
        post_point = postPoint;
}

// load line joint info
void load_joint_line_info(uint offset, uint line_index, uint line_flag, out JointLineAttr attr)
{
    load_joint_line_position(offset, line_flag, attr.flag, attr.prevPoint, attr.curPoint, attr.postPoint);
    
    uint caps_type, lt_type;
    uint logical_width, stipple_index, logical_lt;
    load_line_attributes(line_index, attr.color, attr.width, lt_type, attr.drawZ, attr.glowColor, caps_type, attr.jointType, attr.isLogical);
    load_line_attributes_neutron_sketch(line_index, logical_width, stipple_index, logical_lt);

    adjust_line_width_wide_line_neutron_sketch(logical_width, attr.width);

#ifdef ANALYTIC_STIPPLE
    attr.stippleIndex = stipple_index;
#endif

    if (gRetainMode || (attr.isLogical != uint(0)))
    {
        adjust_line_joint_precision_logical(attr.prevPoint, attr.curPoint, attr.postPoint);
    }
    else
    {
        adjust_line_joint_precision(attr.prevPoint, attr.curPoint, attr.postPoint);
    }
}
// TODO: move all envelope to a same position
vec2 get_joint_envelope_pos(uint vid, uint width, vec2 prev_point, vec2 cur_point, vec2 post_point, uint joint_type)
{
    float weight_expand = get_line_weight_expand(float(width));
    vec2 uv = get_unit_pos(vid);
    
    // get dir of previous line and post line
    vec2 prev_dir = normalize(prev_point - cur_point);
    vec2 post_dir = normalize(post_point - cur_point);

    // get the difference of 2 line dirs
    vec2 dir_diff = prev_dir - post_dir;

    vec2 ave_dir;

    // get perpendicular dir to previous/post dirs
    vec2 prev_perp_dir = vec2(prev_dir.y, -prev_dir.x);
    vec2 post_perp_dir = vec2(post_dir.y, -post_dir.x);

    if (dot(prev_perp_dir, post_dir) > 0.0f)
        prev_perp_dir = -prev_perp_dir;

    if (dot(post_perp_dir, prev_dir) > 0.0f)
        post_perp_dir = -post_perp_dir;

    // if the previous line and post line are overlapped 
    if (dot(dir_diff, dir_diff) < EPS)
    {
        // average dir is the same of negative previous dir
        ave_dir = -prev_dir;
    }
    else
    {
        ave_dir = normalize(prev_perp_dir + post_perp_dir);
    }

    // if is miter joint
    if (joint_type == FLAG_JOINT_MITER)
    {
        // adjust expand range 
        float cos_ang = dot(prev_perp_dir, post_perp_dir);
        float cos_half_ang = sqrt(0.5f+cos_ang*0.5f);
        
        // if large than 85 degree, no additional expand
        if (cos_half_ang <= cos(0.5f*(180.0f - MITER_MIN_ANGLE)*PI/180.0f))
            weight_expand = 0.0f;
        // otherwise increase expand range
        else
        {
            weight_expand = float(width)*0.5f/cos_half_ang;
            
        }
    }

    // compute final sreen position.
    vec2 base_point = cur_point - ave_dir*2.0f;
    vec2 end_point = cur_point + ave_dir*weight_expand;

    vec2 scr_pos = base_point*(1.0f-uv.y) + end_point*uv.y -
                     (uv.x*2.0f - 1.0f)*vec2(ave_dir.y, -ave_dir.x)*weight_expand;

    // translate to NDC position
    return screen_to_ndc_pos(scr_pos);
}

// output line joint properties
void set_line_joint_properties(uint vid, JointLineAttr line_attr, out VertexAttr_MetaWideLine outputData)
{
    outputData.color = line_attr.color;
    outputData.glowColor = line_attr.glowColor;
    outputData.width = line_attr.width;
    outputData.subType = line_attr.jointType;

    outputData.point0 = offset_screen_pos(line_attr.prevPoint);
    outputData.point1 = offset_screen_pos(line_attr.curPoint);
    outputData.point2 = offset_screen_pos(line_attr.postPoint);

    outputData.position.xy = get_joint_envelope_pos(vid, line_attr.width, 
        outputData.point0, outputData.point1, outputData.point2, line_attr.jointType);
    outputData.position.z =  line_attr.drawZ;
    outputData.position.xyz = outputData.position.xyz;
    outputData.position.w = 1.0f;
    
    outputData.point3 = vec2(0.0f, 0.0f);
    outputData.shapeType = uint(0);
    outputData.dist = 0.0f;
    outputData.flag = uint(0);

#ifdef ANALYTIC_STIPPLE
    outputData.stippleIndex = line_attr.stippleIndex;
#endif
}

// output line joint properties in logical space
void set_logical_line_joint_properties(uint vid, JointLineAttr line_attr, out VertexAttr_MetaWideLine outputData)
{
    outputData.color = line_attr.color;
    outputData.glowColor = line_attr.glowColor;
    outputData.width = line_attr.width;
    outputData.subType = line_attr.jointType;

    outputData.point0 = logic_to_screen(line_attr.prevPoint);
    outputData.point1 = logic_to_screen(line_attr.curPoint); 
    outputData.point2 = logic_to_screen(line_attr.postPoint); 

    outputData.position.xy = get_joint_envelope_pos(vid, line_attr.width,
        outputData.point0, outputData.point1, outputData.point2, line_attr.jointType);
    outputData.position.z = line_attr.drawZ;
    outputData.position.xyz = outputData.position.xyz;
    outputData.position.w = 1.0f;
    
    outputData.point3 = vec2(0.0f, 0.0f);
    outputData.shapeType = uint(0);
    outputData.dist = 0.0f;
    outputData.flag = uint(0);

#ifdef ANALYTIC_STIPPLE
    outputData.stippleIndex = line_attr.stippleIndex;
#endif
}

// wide line input information
struct WideLineAttr
{
    vec2 prevPoint;
    vec2 startPoint;
    vec2 endPoint;
    vec2 postPoint;
    
    uint flag;
    uint color; 
    uint width; 
    float drawZ; 
    uint glowColor;
    uint isLogical;

#ifdef ANALYTIC_STIPPLE
    uint stippleIndex;
#endif
};

// adjust wide line precision by guard bound clipping
bvec4 adjust_wide_line_precision(inout vec2 start_point, inout vec2 end_point, inout vec2 prev_point, inout vec2 post_point, inout uint flag)
{
    // adjust precision for start point and end point.
    bvec4 all_out_range = bvec4(false, false, false, false);
    bool pre_out_range = false;
    bool post_out_range = false;
    bvec2 out_range = adjust_line_segment_precision(start_point, end_point);
  
    // if start point out of range, mark it as no previous line
    if (out_range.x)
    {
        flag &= ~HAS_PREV_LINE;
    }
    // if start point in range and has previous line, adjust previous point.
    else if ((flag&HAS_PREV_LINE) != uint(0))
    {
        vec2 prev_delta = prev_point - start_point;
        pre_out_range = adjust_point_precision(prev_point, prev_delta);
    }
    
    // if end point out of range, mark it as no post line
    if (out_range.y)
    {
        flag &= ~HAS_POST_LINE;
    }
    // if end point in range and has point line, adjust post point.
    else if ((flag&HAS_POST_LINE) != uint(0))
    {
        vec2 post_delta = post_point - end_point;
        post_out_range = adjust_point_precision(post_point, post_delta);
    }
    all_out_range = bvec4(out_range, pre_out_range, post_out_range);
    return all_out_range;
}

// adjust line precision for logical space position
void adjust_wide_line_precision_logical(inout vec2 start_point, inout vec2 end_point, inout vec2 prev_point, inout vec2 post_point, inout uint flag)
{
    // transform to screen space
    vec2 startPoint = start_point;
    vec2 endPoint = end_point;
    vec2 prevPoint = prev_point;
    vec2 postPoint = post_point;

    vec2 s_start = ndc_to_screen(logic_to_ndc(start_point));
    vec2 s_end = ndc_to_screen(logic_to_ndc(end_point));
    vec2 s_prev = ndc_to_screen(logic_to_ndc(prev_point));
    vec2 s_post = ndc_to_screen(logic_to_ndc(post_point));
    bvec4 needAdjust = adjust_wide_line_precision(s_start, s_end, s_prev, s_post, flag);

    // transform back to logical space
    if (needAdjust.x)
        start_point = ndc_to_logic(screen_to_ndc_pos(s_start));
    else
        start_point = startPoint;
    if (needAdjust.y)
        end_point = ndc_to_logic(screen_to_ndc_pos(s_end));
    else
        end_point = endPoint;
    if (needAdjust.z)
        prev_point = ndc_to_logic(screen_to_ndc_pos(s_prev));
    else
        prev_point = prevPoint;
    if (needAdjust.w)
        post_point = ndc_to_logic(screen_to_ndc_pos(s_post));
    else
        post_point = postPoint;
}

// load wide line input information
void load_wide_line_info(uint offset, uint line_index, uint line_flag, out WideLineAttr attr)
{
    load_line_position(get_pos_id(offset), attr.startPoint, attr.endPoint);
    
    uint caps_type, joint_type, lt_type;
    uint logical_width, stipple_index, logical_lt;
    load_line_attributes(line_index, attr.color, attr.width, lt_type, attr.drawZ, attr.glowColor, caps_type, joint_type, attr.isLogical);
    load_line_attributes_neutron_sketch(line_index, logical_width, stipple_index, logical_lt);
    load_line_adj_info(offset, line_flag, attr.startPoint, attr.flag, attr.prevPoint, attr.postPoint);

    adjust_line_width_wide_line_neutron_sketch(logical_width, attr.width);

#ifdef ANALYTIC_STIPPLE
    attr.stippleIndex = stipple_index;
#endif

    if (gRetainMode)
    { 
        adjust_wide_line_precision_logical(attr.startPoint, attr.endPoint, attr.prevPoint, attr.postPoint, attr.flag);
    }
    else
    {
        if (attr.isLogical != uint(0))
        {
            adjust_wide_line_precision_logical(attr.startPoint, attr.endPoint, attr.prevPoint, attr.postPoint, attr.flag);
        }
        else
        {
            adjust_wide_line_precision(attr.startPoint, attr.endPoint, attr.prevPoint, attr.postPoint, attr.flag);
        }
    }
}

// set vertex output information for wide line
void set_wide_line_properties(uint vid, WideLineAttr line_attr, 
    out VertexAttr_MetaWideLine outputData)
{
    float temp_dist;
    outputData.position.xy = get_line_envelope_pos(vid, line_attr.width, 
        line_attr.startPoint, line_attr.endPoint, temp_dist);
    outputData.position.z =  line_attr.drawZ;
    outputData.position.xyz = outputData.position.xyz;
    outputData.position.w = 1.0f;
    
    outputData.dist = temp_dist;
    outputData.color = line_attr.color;
    outputData.glowColor = line_attr.glowColor;
    outputData.flag = line_attr.flag;
    outputData.width = line_attr.width;

    outputData.point0 = offset_screen_pos(line_attr.prevPoint);
    outputData.point1 = offset_screen_pos(line_attr.startPoint);
    outputData.point2 = offset_screen_pos(line_attr.endPoint);
    outputData.point3 = offset_screen_pos(line_attr.postPoint);
    
    outputData.shapeType = uint(0);
    outputData.subType = uint(0);

#ifdef ANALYTIC_STIPPLE
    outputData.stippleIndex = line_attr.stippleIndex;
#endif
}

// set vertex output information for wide line in logical space
void set_logical_wide_line_properties(uint vid, WideLineAttr line_attr,
    out VertexAttr_MetaWideLine outputData)
{
    float temp_dist;
   
    vec2 screen_prev = logic_to_screen(line_attr.prevPoint);
    vec2 screen_start = logic_to_screen(line_attr.startPoint);
    vec2 screen_end = logic_to_screen(line_attr.endPoint);
    vec2 screen_post = logic_to_screen(line_attr.postPoint);

    outputData.position.xy = get_logical_wide_line_envelope_pos(vid, line_attr.flag, line_attr.width,
                          screen_start, screen_end, temp_dist );

    outputData.position.z = line_attr.drawZ;
    outputData.position.xyz = outputData.position.xyz;
    outputData.position.w = 1.0f;

    outputData.dist = temp_dist;
    outputData.color = line_attr.color;
    outputData.glowColor = line_attr.glowColor;
    outputData.flag = line_attr.flag;
    outputData.width = line_attr.width;

    outputData.point0 = screen_prev;
    outputData.point1 = screen_start;
    outputData.point2 = screen_end;
    outputData.point3 = screen_post;
    
    outputData.shapeType = uint(0);
    outputData.subType = uint(0);

#ifdef ANALYTIC_STIPPLE
    outputData.stippleIndex = line_attr.stippleIndex;
#endif
}

void main()
{
    bool isEndPoint = false;
    uint shape_type = uint(0);
    
    LineVertex_Input vs_input = LineVertex_Input(uint(0), uint(0), uvec2(0, 0));
    
    load_wide_line_input(uint(gl_VertexID), uint(gl_InstanceID), gWideLineIndexTex, vs_input, shape_type, isEndPoint);
    
    VertexAttr_MetaWideLine outputData = VertexAttr_MetaWideLine(vec4(0.0f, 0.0f, 0.0f, 0.0f), 
                                     uint(0), 
                                     uint(0), 
                                     uint(0), 
                                     uint(0),
                                     uint(0), 
                                     uint(0), 
                                     vec2(0.0f, 0.0f), 
                                     vec2(0.0f, 0.0f), 
                                     vec2(0.0f, 0.0f), 
                                     vec2(0.0f, 0.0f), 
                                     0.0f
#ifdef ANALYTIC_STIPPLE
                                     , uint(0)
#endif
                                     );
    
    if (shape_type == uint(SHAPE_BODY))
    {
        WideLineAttr line_attr = WideLineAttr(vec2(0.0f, 0.0f), vec2(0.0f, 0.0f), vec2(0.0f, 0.0f),
                                              vec2(0.0f, 0.0f), uint(0), uint(0), uint(0), 0.0f, uint(0), uint(0)
#ifdef ANALYTIC_STIPPLE
                                              , uint(0)
#endif
                                              );
        load_wide_line_info(vs_input.PrimID.x, get_prim_id(vs_input.PrimID.y), get_prim_flag(vs_input.PrimID.y), line_attr);


        if (gRetainMode)
        {
            load_dynamic_draworderz(uint(gl_InstanceID), gWideLineDrawOrderZTex, line_attr.drawZ);
        }                                                        

        if(line_attr.isLogical != uint(0))
        {
            set_logical_wide_line_properties(vs_input.VertexID, line_attr, outputData);
        }   
        else
        {
            set_wide_line_properties(vs_input.VertexID, line_attr, outputData);
        }
        
        outputData.shapeType = shape_type;
    
    }
    else if (shape_type == uint(SHAPE_CAPS))
    {
        CapsLineAttr line_attr = CapsLineAttr(vec2(0.0f, 0.0f), vec2(0.0f, 0.0f), uint(0), uint(0), uint(0), 0.0f, uint(0), uint(0), uint(0)
#ifdef ANALYTIC_STIPPLE
                                              , uint(0)
#endif
                                              );
        load_caps_line_info(vs_input.PrimID.x, get_prim_id(vs_input.PrimID.y), get_prim_flag(vs_input.PrimID.y), line_attr);
    
        if (gRetainMode)
        {
            load_dynamic_draworderz(uint(gl_InstanceID), gLineCapsDrawOrderZTex, line_attr.drawZ);
        }
        
        if (line_attr.isLogical != uint(0))
        {
            set_logical_line_caps_properties(vs_input.VertexID, isEndPoint, line_attr, outputData);
        } 
        else
        {
            set_line_caps_properties(vs_input.VertexID, isEndPoint, line_attr, outputData);
        }
        
        outputData.shapeType = shape_type;
    }
    else if (shape_type == uint(SHAPE_JOINT))
    {
        JointLineAttr line_attr = JointLineAttr(vec2(0.0f, 0.0f), vec2(0.0f, 0.0f), vec2(0.0f, 0.0f),
                                                uint(0), uint(0), uint(0), 0.0f, uint(0), uint(0), uint(0)
#ifdef ANALYTIC_STIPPLE
                                                , uint(0)
#endif
                                                );
        load_joint_line_info(vs_input.PrimID.x, get_prim_id(vs_input.PrimID.y), get_prim_flag(vs_input.PrimID.y), line_attr);
    

        if (gRetainMode)
        {
            load_dynamic_draworderz(uint(gl_InstanceID), gLineJointDrawOrderZTex, line_attr.drawZ);
        }
        if (line_attr.isLogical != uint(0))
            set_logical_line_joint_properties(vs_input.VertexID, line_attr, outputData);
        else 
            set_line_joint_properties(vs_input.VertexID, line_attr, outputData);
            
        outputData.shapeType = shape_type;
    }
    
    
    gl_Position = outputData.position;

    vso_position = outputData.position;
    vso_flagS = int(outputData.flag);
    vso_colorS = int(outputData.color);
    vso_glowColorS = int(outputData.glowColor);
    vso_widthS = int(outputData.width);
    vso_shapeTypeS = int(outputData.shapeType);
    vso_subTypeS = int(outputData.subType);
    vso_point0 = outputData.point0;
    vso_point1 = outputData.point1;
    vso_point2 = outputData.point2;
    vso_point3 = outputData.point3;
    vso_dist = outputData.dist;
#ifdef ANALYTIC_STIPPLE
    vso_stippleIndexS = int(outputData.stippleIndex);
#endif
}

}

GLSLShader WideLine_PS
{

//check overlap case with previous line
void check_overlap_with_post_line(VertexAttr_WideLine inputData, vec2 pixelPos, float dist_to_end, vec2 line_dir)
{
    if ((inputData.flag&HAS_POST_LINE) != uint(0))
    {
        vec2 post_dir = normalize(inputData.postPoint - inputData.endPoint);
        if (inLineRegion(pixelPos, inputData.endPoint, inputData.postPoint, float(inputData.width) + 2.0f, post_dir))
        {
            vec2 cur_dir = -line_dir;

            vec2 dir_diff = post_dir - cur_dir;

            if ((abs(dir_diff.x) < EPS) && (abs(dir_diff.y) < EPS)) // same dir, always display previous line
                discard;

            bool border_pixel = (dist_to_end < EPS);

            vec2 vec_to_end = (pixelPos - inputData.endPoint);
            float post_dist = abs(dot(vec_to_end, post_dir));
            float cur_dist = abs(dot(vec_to_end, cur_dir));

            if ((post_dist < EPS) && (cur_dist < EPS) && border_pixel) // case1: end point pixel - display previous line
                discard;

            if (abs(post_dist - cur_dist) < EPS) // case2: same distance - display previous line
                discard;

            if (post_dist >= cur_dist) // case3: display line with brighter pixel
                discard;

        }
    }
}
// check overlap case with post line
void check_overlap_with_prev_line(VertexAttr_WideLine inputData, vec2 pixelPos, float dist_to_start, vec2 line_dir)
{
    if ((inputData.flag&HAS_PREV_LINE) != uint(0))
    {
        vec2 prev_dir = normalize(inputData.prevPoint - inputData.startPoint);
        if (inLineRegion(pixelPos, inputData.prevPoint, inputData.startPoint, float(inputData.width) + 2.0f, -prev_dir))
        {
            vec2 cur_dir = line_dir;

            vec2 dir_diff = prev_dir - cur_dir;


            bool border_pixel = (dist_to_start < EPS);

            vec2 vec_to_start = pixelPos - inputData.startPoint;
            float prev_dist = abs(dot(vec_to_start, prev_dir));
            float cur_dist = abs(dot(vec_to_start, cur_dir));

            bool same_dir = ((abs(dir_diff.x) < EPS) && (abs(dir_diff.y) < EPS));
            bool start_pixel = ((prev_dist < EPS) && (cur_dist < EPS) && border_pixel);
            bool same_dist = (abs(prev_dist - cur_dist) <= EPS);



            if ((!same_dir) && (!start_pixel) && (!same_dist))
            {
                if (prev_dist > cur_dist)
                    discard;
            }


        }
    }
}

// wide line body pixel shader
void main()
{
    uint vso_flag = uint(vso_flagS);
    uint vso_color = uint(vso_colorS);
    uint vso_glowColor = uint(vso_glowColorS);
    uint vso_width = uint(vso_widthS);
    uint vso_shapeType = uint(vso_shapeTypeS);
    uint vso_subType = uint(vso_subTypeS);
#ifdef ANALYTIC_STIPPLE
    uint vso_stippleIndex = uint(vso_stippleIndexS);
#endif

    vec4 color = vec4(0.0f, 0.0f, 0.0f, 0.0f);
    
    if (vso_shapeType == uint(SHAPE_BODY))
    {
        VertexAttr_WideLine inputData = VertexAttr_WideLine(vso_position, vso_flag, vso_color, vso_glowColor, vso_width,
                                                            vso_point0, vso_point1, vso_point2, vso_point3, vso_dist
#ifdef ANALYTIC_STIPPLE
                                                            , vso_stippleIndex
#endif
                                                            );
        vec2 pixelPos = inputData.position.xy * vec2(0.5f, 0.5f) + vec2(0.5f, 0.5f);
        pixelPos = pixelPos * gScreenSize;
        //pixelPos.y = gScreenSize.y - pixelPos.y;

        float width = adjust_line_width_wide_line(inputData.width);

        float dist = 0.0f;

        vec2 line_dir = normalize(inputData.endPoint - inputData.startPoint);

        // check if current pixel in line region.
        if (!inLineRegion(pixelPos, inputData.startPoint, inputData.endPoint, float(inputData.width) + 2.0f, line_dir))
            discard;

        // get distance from pixel to line, and
        dist = abs_dist_pixel_to_line(pixelPos,
        normalize(inputData.startPoint - inputData.endPoint), inputData.startPoint);

        // get distance from pixel to start/end points
        float dist_to_start = length(pixelPos - inputData.startPoint);
        float dist_to_end = length(pixelPos - inputData.endPoint);

        check_overlap_with_post_line(inputData, pixelPos, dist_to_end, line_dir);
        check_overlap_with_prev_line(inputData, pixelPos, dist_to_start, line_dir);

        // get wide line anti-aliasing color
        
        if (gNoAAMode != 0)
        {
    #ifdef ANALYTIC_HIGHLIGHT
            vec3 lineParams;
            lineParams.x = inputData.startPoint.y - inputData.endPoint.y;
            lineParams.y = inputData.endPoint.x - inputData.startPoint.x;
            lineParams.z = inputData.startPoint.x * inputData.endPoint.y - inputData.endPoint.x * inputData.startPoint.y;

            bool in_sharp = (width > 1.0f) || in_line_sharp(lineParams, pixelPos);
            color = compute_highlight_sharp_color(dist, width, inputData.color, inputData.glowColor, in_sharp);
    #else
            color = compute_final_color_sharp(dist, width, inputData.color, inputData.glowColor);
    #endif
        }
        else
        {
#ifdef ANALYTIC_STIPPLE
            color = compute_final_color_stipple(dist, width, inputData.color, inputData.glowColor, pixelPos, inputData.stippleIndex);
#else
            color = compute_final_color(dist, width, inputData.color, inputData.glowColor);
#endif
        }
    }
    else if (vso_shapeType == uint(SHAPE_CAPS))
    {
         VertexAttr_LineCaps inputData = VertexAttr_LineCaps(vso_position, vso_color, vso_glowColor, vso_width, vso_subType,
                                                             vso_point0, vso_point1, vso_point2
#ifdef ANALYTIC_STIPPLE
                                                             , vso_stippleIndex
#endif
                                                             );
        // get pixel position
        vec2 pixel_pos = inputData.position.xy * vec2(0.5f, 0.5f) + vec2(0.5f, 0.5f);
        pixel_pos *= gScreenSize;
        //pixel_pos.y = gScreenSize.y - pixel_pos.y;

        // compute distance to caps center
        float dist = length(pixel_pos - inputData.center);

        // get line width
        float width = adjust_line_width_wide_line(inputData.width);

        // if in line body region, discard
        if (inLineRegion(pixel_pos, inputData.center, inputData.endPoint, float(inputData.width) + 2.0f, -inputData.dir))
            discard;

        // if zoom too small and the pixel is out of line and in another side of line-body, discard
        if (over_middle_point(pixel_pos, inputData.center, inputData.endPoint, inputData.dir))
            discard;
        if (gNoAAMode != 0)
        {
            color = compute_sharp_caps_final_color(dist, width, inputData.color, inputData.glowColor,
                pixel_pos, inputData.center, inputData.dir, inputData.capType);
        }
        else
        {
#ifdef ANALYTIC_STIPPLE
            color = compute_caps_final_color_stipple(dist, width, inputData.color, inputData.glowColor,
                pixel_pos, inputData.center, inputData.dir, inputData.capType, inputData.stippleIndex);
#else
            color = compute_caps_final_color(dist, width, inputData.color, inputData.glowColor,
                pixel_pos, inputData.center, inputData.dir, inputData.capType);
#endif
        }
    }
    else if (vso_shapeType == uint(SHAPE_JOINT))
    {
        VertexAttr_LineJoint inputData = VertexAttr_LineJoint(vso_position, vso_color, vso_glowColor, vso_width,
                                                              vso_subType, vso_point0, vso_point1, vso_point2
#ifdef ANALYTIC_STIPPLE
                                                              , vso_stippleIndex
#endif
                                                              );
        // get screen position
        vec2 pixel_pos = inputData.position.xy * vec2(0.5f, 0.5f) + vec2(0.5f, 0.5f);
        pixel_pos *= gScreenSize;
        //pixel_pos.y = gScreenSize.y - pixel_pos.y;

        // get line dir of previous and post line.
        vec2 prev_dir = normalize(inputData.curPoint - inputData.prevPoint);
        vec2 pos_dir = normalize(inputData.curPoint - inputData.postPoint);

        // discard pixels in previous and post line body.
        if (inLineRegion(pixel_pos, inputData.prevPoint, inputData.curPoint, float(inputData.width)+1.0f, prev_dir))
                discard;

        if (inLineRegion(pixel_pos, inputData.curPoint, inputData.postPoint, float(inputData.width)+1.0f, -pos_dir))
                discard;

        // discard pixels out of previous and post lines, and in another side of line bodies.
        if (over_middle_point(pixel_pos, inputData.curPoint, inputData.prevPoint, prev_dir))
            discard;  

        if (over_middle_point(pixel_pos, inputData.curPoint, inputData.postPoint, pos_dir))
            discard;  

           
        // get lendth to joint point
        float dist = length(pixel_pos - inputData.curPoint);

        // get line weight
        float width = adjust_line_width_wide_line(inputData.width);
 
        // get joint color
        if(gNoAAMode != 0)
        {
            color = compute_sharp_joint_final_color(dist, width, inputData.color, inputData.glowColor,
                pixel_pos , inputData.prevPoint, inputData.curPoint, inputData.postPoint, inputData.jointType);
        }
        else
        {
#ifdef ANALYTIC_STIPPLE
            color = compute_joint_final_color_stipple(dist, width, inputData.color, inputData.glowColor,
                pixel_pos , inputData.prevPoint, inputData.curPoint, inputData.postPoint, inputData.jointType, inputData.stippleIndex);
#else
            color = compute_joint_final_color(dist, width, inputData.color, inputData.glowColor,
                pixel_pos , inputData.prevPoint, inputData.curPoint, inputData.postPoint, inputData.jointType);
#endif
        }

    }

    if (color.a < 0.01f)
        discard;
    pso_color = OIT_PS_OUTPUT(color, vso_position);  
}

}

technique Line_WideAA
{
    pass P0
    {
        VertexShader (in VS_INPUT, out VS_TO_PS) = WideLine_VS;
        PixelShader (in VS_TO_PS, out pixelOut) = WideLine_PS;
    }
}

