//**************************************************************************/
// Copyright (c) 2009 Autodesk, Inc.
// All rights reserved.
// 
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information written by Autodesk, Inc., and are
// protected by Federal copyright law. They may not be disclosed to third
// parties or copied or duplicated in any form, in whole or in part, without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/
// AUTHOR: Charlotta Wadman
// DESCRIPTION: Geometry mask. Render the input geometry with a specified color.
// CREATED: November 2009
//**************************************************************************/

// For per-object clipping, unfortunately needed on by default;
// the problem is that for an override material, per-object clipping will not
// affect this material and get it to recompile.
// TODO: is there some way to get this variable set *per object* for it's material?
// ApplySystemShaderMacros in the script interpreter does so globally, but can't
// per object. Mauricio thinks we might need a callback in the script interpreter.
//#ifdef CLIPPING
#include "ClippingGL.cgh"
// World transformation, needed only for clipping
float4x4 gWXf : World 
< 
string UIWidget = "None";
bool rowMajor = true;
>;
//#endif

// World-view-projection transformation.
float4x4 gWVPXf : WorldViewProjection 
< 
    string UIWidget = "None"; 
>;


float4 gMaskColor = float4(0.0f, 0.0f, 0.0f, 1.0f);

// Depth priority, which shifts the model a bit forward in the z-buffer
float gDepthPriority : DepthPriority
<
    string UIName =  "Depth Priority";
    string UIWidget = "Slider";
    float UIMin = -16/1048576.0f;    // divide by 2^24/16 by default
    float UIMax = 16/1048576.0f;
    float UIStep = 1/1048576.0f;
> = 0.0f;

// The visibility texture.
texture gVisibilityTex : Texture
<
    string UIName = "Texture";
>;

// Visibility texture sampler.
sampler2D gSamp : TextureSampler = sampler_state
{
    Texture = <gVisibilityTex>;
};

// Vertex shader input structure.
struct VS_INPUT
{
    float3 Pos : POSITION;
};

// Vertex shader output structure.
struct VS_TO_PS
{
    float4 HPos : POSITION;

//#ifdef CLIPPING // OpenGL ONLY
    // World position for clipping
    float4 HPw : TEXCOORD0;
//#endif
};

// Vertex shader output structure for text.
struct VS_TO_PS_Text
{
    VS_TO_PS BasicVSToPS;
    float4 VPos : TEXCOORD1;
};

// Basic vertex shader function.
VS_TO_PS VSBasic(VS_INPUT In)
{
    VS_TO_PS Out;
    
    // Transform the position from object space to clip space for output.
    Out.HPos = mul(gWVPXf, float4(In.Pos, 1.0f));
    
    // modify the HPos a bit by biasing the Z a bit forward, based on depth priority
    Out.HPos.z -= Out.HPos.w*2.0f*gDepthPriority;
   
//#ifdef CLIPPING
    // World position for clipping.
    Out.HPw = mul(float4(In.Pos, 1.0f), gWXf);
//#endif

    return Out;
}

// Vertex shader for main technique, used to set up GBuffer data to interpolate.
VS_TO_PS VS_NPR(VS_INPUT In)
{
    return VSBasic(In);
}

// Vertex shader for text technique, used to set up GBuffer data to interpolate.
VS_TO_PS_Text VS_NPR_Text(VS_INPUT In)
{
    VS_TO_PS_Text Out;
    Out.BasicVSToPS = VSBasic(In);

     // Output the position to pixel shader.
    Out.VPos = Out.BasicVSToPS.HPos;

    return Out;
}

// Pixel shader for main.
float4 PS_NPR(VS_TO_PS In) : COLOR0
{
//#ifdef CLIPPING // OpenGL ONLY
    // Compute whether the pixel need to be discard by the clipping planes.
    // This is slow, for NV4x(GeForce 6xxx) or higher card, we can use the semantic CLP(n) 
    // in vertex shader to make it faster.
    if (gNumClipPlanes > 0) { if(dot(In.HPw, gClipPlanes[0])<0) discard;}
    if (gNumClipPlanes > 1) { if(dot(In.HPw, gClipPlanes[1])<0) discard;}
    if (gNumClipPlanes > 2) { if(dot(In.HPw, gClipPlanes[2])<0) discard;}
    if (gNumClipPlanes > 3) { if(dot(In.HPw, gClipPlanes[3])<0) discard;}
    if (gNumClipPlanes > 4) { if(dot(In.HPw, gClipPlanes[4])<0) discard;}
    if (gNumClipPlanes > 5) { if(dot(In.HPw, gClipPlanes[5])<0) discard;}
//#endif

    return gMaskColor;
}

// Pixel shader for text.
float4 PS_NPR_Text(VS_TO_PS_Text In) : COLOR0
{
//#ifdef CLIPPING // OpenGL ONLY
    // Compute whether the pixel need to be discard by the clipping planes.
    // This is slow, for NV4x(GeForce 6xxx) or higher card, we can use the semantic CLP(n) 
    // in vertex shader to make it faster.
    if (gNumClipPlanes > 0) { if(dot(In.BasicVSToPS.HPw, gClipPlanes[0])<0) discard;}
    if (gNumClipPlanes > 1) { if(dot(In.BasicVSToPS.HPw, gClipPlanes[1])<0) discard;}
    if (gNumClipPlanes > 2) { if(dot(In.BasicVSToPS.HPw, gClipPlanes[2])<0) discard;}
    if (gNumClipPlanes > 3) { if(dot(In.BasicVSToPS.HPw, gClipPlanes[3])<0) discard;}
    if (gNumClipPlanes > 4) { if(dot(In.BasicVSToPS.HPw, gClipPlanes[4])<0) discard;}
    if (gNumClipPlanes > 5) { if(dot(In.BasicVSToPS.HPw, gClipPlanes[5])<0) discard;}
//#endif

    // Get the sample coordinate for the current pixel.
    float sampleX = (In.VPos.x / In.VPos.w + 1.0) / 2.0;
    float sampleY = (In.VPos.y / In.VPos.w + 1.0) / 2.0;
    // Sample the visibility. We use the reb channel as the visibility.
    float visibility = tex2D(gSamp, float2(sampleX, sampleY)).r;
    if(visibility > 0.5f)
        discard;

    return gMaskColor;
}

// The main technique.
technique Main
{
    pass p0
    {
        VertexProgram = compile glslv VS_NPR();
        FragmentProgram = compile glslf PS_NPR();
    }
}

// The text technique.
technique Text
{
    pass p0
    {
        VertexProgram = compile glslv VS_NPR_Text();
        FragmentProgram = compile glslf PS_NPR_Text();
    }
}