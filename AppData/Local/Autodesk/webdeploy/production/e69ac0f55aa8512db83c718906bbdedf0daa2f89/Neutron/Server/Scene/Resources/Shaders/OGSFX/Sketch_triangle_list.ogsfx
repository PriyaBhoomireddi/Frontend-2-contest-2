#version 330
#include "Sketch_triangle.ogsfh"

// simple triangle list vertex texture structure (glow is the same):
// 1. coordinates of three vertices (6 floats)
// 2. depth and logical shared flag (1 float)
// 3. color (1 float)
uniform highp texture2D gSimpleTriListVertexTex_ : SimpleTriangleListVertexTexture ;
uniform highp sampler2D gSimpleTriListVertexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gSimpleTriListVertexTex_>; };

// Since simple triangle and simple glow triangle are in one buffer, we need
// index texture to know which triangle it is.
//
// simple triangle list index texture structure:
// index value of current triangle
uniform highp texture2D gSimpleTriListIndexTex_ : SimpleTriangleListIndexTexture ;
uniform highp sampler2D gSimpleTriListIndexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gSimpleTriListIndexTex_>; };

// simple glow triangle list index texture structure:
// index value of current glow triangle
uniform highp texture2D gGlowTriListIndexTex_ : GlowTriangleListIndexTexture ;
uniform highp sampler2D gGlowTriListIndexTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gGlowTriListIndexTex_>; };
uniform highp texture2D gTriListDrawOrderZTex_ : TriListDrawOrderZTex ;
uniform highp sampler2D gTriListDrawOrderZTex = sampler_state { TEXTURE_MIN_FILTER = NEAREST; TEXTURE_MAG_FILTER = NEAREST; Texture = <gTriListDrawOrderZTex_>; };

attribute VS_INPUT
{
    int VertexID : TEXCOORD0;
    int InstanceID : TEXCOORD1;
};

attribute VS_TO_PS
{
    vec4 vso_pos;
    vec4 vso_color;
};

attribute pixelOut
{
    vec4 pso_color : COLOR0;
};

GLSLShader TriangleList_VS
{

void load_vertex_info(uint instance_id, uint vertex_id, uint tri_id, out TriVertexAttr attr)
{
    ivec2 offset = get_ptex_offset(tri_id*uint(2) + uint(1));
    vec4 val = texelFetch(gSimpleTriListVertexTex, offset, 0);

    if (vertex_id == uint(0))
    {
        ivec2 offset1 = get_ptex_offset(tri_id*uint(2));
        attr.pos = texelFetch(gSimpleTriListVertexTex, offset1, 0).xy;
    }
    else if (vertex_id == uint(1))
    {
        ivec2 offset1 = get_ptex_offset(tri_id*uint(2));
        attr.pos = texelFetch(gSimpleTriListVertexTex, offset1, 0).zw;
    }
    else if (vertex_id == uint(2))
    {
        attr.pos = val.xy;
    }

    if (gRetainMode)
    {
        load_dynamic_draworderz(instance_id, gTriListDrawOrderZTex, attr.drawZ);
        attr.isLogical = true;
    }
    else 
    {
        attr.isLogical = get_logical_space(val.z);
        attr.drawZ = abs(val.z);
    }
    
    attr.color = floatBitsToUint(val.w);

    attr.prim_id = uint(0);
}

void main()
{
    TriVertexAttr attr = TriVertexAttr(vec2(0.0f, 0.0f), uint(0), 0.0f, uint(0), false);

	uint tri_id;

#ifdef ANALYTIC_HIGHLIGHT
		tri_id = load_tri_id_from_tex(gGlowTriListIndexTex, uint(gl_InstanceID));
#else
		tri_id = load_tri_id_from_tex(gSimpleTriListIndexTex, uint(gl_InstanceID));
#endif


    load_vertex_info(uint(gl_InstanceID), uint(gl_VertexID), tri_id, attr);

    VertexAttr_Triangle outputData = VertexAttr_Triangle(vec4(0.0f, 0.0f, 0.0f, 0.0f),
                                                     vec4(0.0f, 0.0f, 0.0f, 0.0f));
    set_triangle_properties(attr, outputData);

    gl_Position = outputData.position;

    vso_pos = outputData.position;
    vso_color = outputData.color;
}

}

GLSLShader Triangle_PS
{

void main()
{
    if (vso_color.a < 0.01f)
        discard;
    pso_color = OIT_PS_OUTPUT(vso_color, vso_pos);  
}

}

technique TriangleList
{
    pass P0
    {
        VertexShader (in VS_INPUT, out VS_TO_PS) = TriangleList_VS;
        PixelShader (in VS_TO_PS, out pixelOut) = Triangle_PS;
    }
}

